import asyncio
import logging
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher
from config import CHANNEL_ID

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_new_sources():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É—î–º–æ –Ω–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–µ–∫—Ç–æ—Ä
        collector = NewsCollector()
        
        # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
        all_news = collector.collect_all_news()
        
        if not all_news:
            logger.warning("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω")
            return
        
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏–Ω")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        categories = {}
        for news in all_news:
            category = news.get('category', 'unknown')
            if category not in categories:
                categories[category] = []
            categories[category].append(news)
        
        for category, news_list in categories.items():
            logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category}': {len(news_list)} –Ω–æ–≤–∏–Ω")
            for news in news_list[:2]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 –Ω–æ–≤–∏–Ω–∏
                logger.info(f"  - {news['title'][:50]}...")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø–µ—Ä—à–æ—ó –Ω–æ–≤–∏–Ω–∏
        if all_news:
            publisher = TelegramPublisher()
            
            # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
            if await publisher.test_connection():
                logger.info("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram —É—Å–ø—ñ—à–Ω–µ")
                
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–µ—Ä—à—É –Ω–æ–≤–∏–Ω—É
                first_news = all_news[0]
                logger.info(f"üì§ –ü—É–±–ª—ñ–∫—É—î–º–æ: {first_news['title'][:50]}...")
                
                success = await publisher.publish_news(first_news)
                if success:
                    logger.info("‚úÖ –ù–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞")
                else:
                    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
            else:
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
        
        await publisher.close()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_new_sources()) 