#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –¥–∂–µ—Ä–µ–ª –Ω–æ–≤–∏–Ω
"""

import asyncio
import logging
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher
from config import NEWS_SOURCES

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_news_sources():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω"""
    collector = NewsCollector()
    publisher = TelegramPublisher()
    
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –Ω–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω...")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
    telegram_ok = await publisher.test_connection()
    if not telegram_ok:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
        return
    
    logger.info("‚úÖ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –æ–∫—Ä–µ–º–æ
    for source_key, source_info in NEWS_SOURCES.items():
        logger.info(f"üì∞ –¢–µ—Å—Ç—É—î–º–æ {source_info['name']}...")
        
        try:
            news = collector.get_news_from_rss(source_key, source_info)
            if news:
                logger.info(f"‚úÖ {source_info['name']}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–∏–Ω")
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—É –Ω–æ–≤–∏–Ω—É —è–∫ –ø—Ä–∏–∫–ª–∞–¥
                if news:
                    first_news = news[0]
                    logger.info(f"   –ü—Ä–∏–∫–ª–∞–¥: {first_news.get('title', '')[:100]}...")
            else:
                logger.warning(f"‚ö†Ô∏è {source_info['name']}: –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå {source_info['name']}: –ø–æ–º–∏–ª–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
    try:
        all_news = collector.collect_all_news()
        logger.info(f"‚úÖ –ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏–Ω")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∂–µ—Ä–µ–ª–∞—Ö
        source_stats = {}
        for news in all_news:
            source = news.get('source', '–ù–µ–≤—ñ–¥–æ–º–æ')
            source_stats[source] = source_stats.get(source, 0) + 1
        
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∂–µ—Ä–µ–ª–∞—Ö:")
        for source, count in source_stats.items():
            logger.info(f"   {source}: {count} –Ω–æ–≤–∏–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≥–∞–ª—å–Ω–æ–º—É –∑–±–æ—Ä—ñ –Ω–æ–≤–∏–Ω: {e}")
    
    await publisher.close()

if __name__ == "__main__":
    asyncio.run(test_news_sources()) 