#!/usr/bin/env python3
"""
–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω –∑ –≤—ñ–¥–µ–æ
–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏–Ω–∏ —ñ –ø—É–±–ª—ñ–∫—É—î –ø–µ—Ä—à—É –∑ –≤—ñ–¥–µ–æ, –ø–æ—Ç—ñ–º –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timezone
from typing import List, Dict, Optional

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import BOT_TOKEN, CHANNEL_ID, NEWS_SOURCES
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class TestVideoHandler:
    def __init__(self):
        self.news_collector = NewsCollector()
        self.telegram_publisher = TelegramPublisher()
        
    async def find_and_publish_video_news(self):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏–Ω–∏ —ñ –ø—É–±–ª—ñ–∫—É—î –ø–µ—Ä—à—É –∑ –≤—ñ–¥–µ–æ"""
        try:
            logger.info("üîç –ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω...")
            
            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            all_news = []
            sources_with_news = []
            
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
            for source_key, source_info in NEWS_SOURCES.items():
                try:
                    news = self.news_collector.get_news_from_rss(source_key, source_info)
                    if news:
                        sources_with_news.append((source_key, source_info, news))
                        all_news.extend(news)
                        logger.info(f"‚úÖ {source_info['name']}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–∏–Ω")
                except Exception as e:
                    logger.error(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ –Ω–æ–≤–∏–Ω –∑ {source_key}: {e}")
            
            logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏–Ω –∑–∞–≥–∞–ª–æ–º")
            
            if not all_news:
                logger.warning("‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –®—É–∫–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ
            news_with_video = []
            for news in all_news:
                video_url = news.get('video_url', '')
                if video_url:
                    news_with_video.append(news)
                    logger.info(f"üé• –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ: {news.get('title', '')[:50]}...")
            
            if not news_with_video:
                logger.warning("‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ
            first_video_news = news_with_video[0]
            logger.info(f"üì§ –ü—É–±–ª—ñ–∫—É—é –ø–µ—Ä—à—É –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ: {first_video_news.get('title', '')[:50]}...")
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–∏–Ω—É
            success = await self.telegram_publisher.publish_news(first_video_news)
            
            if success:
                logger.info("‚úÖ –ù–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                return True
            else:
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É: {e}")
            return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –Ω–æ–≤–∏–Ω –∑ –≤—ñ–¥–µ–æ")
    
    handler = TestVideoHandler()
    
    try:
        success = await handler.find_and_publish_video_news()
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")
        else:
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É –±–µ–∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
            
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É: {e}")
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—ó
        try:
            if hasattr(handler.news_collector, 'session') and handler.news_collector.session:
                await handler.news_collector.session.close()
        except:
            pass
        try:
            if hasattr(handler.telegram_publisher, 'session') and handler.telegram_publisher.session:
                await handler.telegram_publisher.session.close()
        except:
            pass
        logger.info("üëã –¢–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main()) 