import asyncio
import logging
import os
from config import BOT_TOKEN, CHANNEL_ID
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher
from air_alerts_monitor import AirAlertsMonitor
from memorial_messages import MemorialMessageScheduler
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import socket

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ü—Ä–æ—Å—Ç–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤
        pass

def start_health_server():
    """–ó–∞–ø—É—Å–∫–∞—î HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check"""
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–ª—å–Ω–∏–π –ø–æ—Ä—Ç
        port = int(os.getenv('PORT', 8000))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤–µ—Ä
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        
        logging.info(f"üöÄ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        server_thread = threading.Thread(target=server.serve_forever, daemon=True)
        server_thread.start()
        
        return server
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

class NewsBot:
    def __init__(self):
        self.publisher = TelegramPublisher()
        self.news_collector = NewsCollector()  # –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ publisher
        self.alerts_monitor = AirAlertsMonitor(self.publisher)
        self.memorial_scheduler = MemorialMessageScheduler(self.publisher)

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ health check —Å–µ—Ä–≤–µ—Ä
            health_server = start_health_server()
            
            if not health_server:
                logging.warning("‚ö†Ô∏è Health check —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
            logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
            await asyncio.gather(
                self.run_news_collector(),
                self.alerts_monitor.monitor(),
                self.memorial_scheduler.monitor_memorial_schedule()
            )
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ aiohttp —Å–µ—Å—ñ—é
            if hasattr(self.publisher, 'session') and self.publisher.session:
                await self.publisher.session.close()
                logging.info("üîí aiohttp —Å–µ—Å—ñ—é –∑–∞–∫—Ä–∏—Ç–æ")

    async def run_news_collector(self):
        """–ó–∞–ø—É—Å–∫–∞—î –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω"""
        try:
            while True:
                # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
                all_news = self.news_collector.collect_all_news()
                
                if all_news:
                    logging.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω")
                    
                    # –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ —á–µ—Ä–µ–∑ publisher
                    for news in all_news[:1]:  # –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–æ –æ–¥–Ω—ñ–π –Ω–æ–≤–∏–Ω—ñ
                        try:
                            await self.publisher.publish_news(news)
                            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—É
                            news_id = f"{news['source_key']}_{news['id']}"
                            self.news_collector.mark_as_published(news_id, news['source_key'])
                            logging.info(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É: {news['title'][:50]}...")
                        except Exception as e:
                            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
                else:
                    logging.info("üì≠ –ù–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                await asyncio.sleep(3500)  # 58 —Ö–≤–∏–ª–∏–Ω
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∑–±–æ—Ä—ñ –Ω–æ–≤–∏–Ω: {e}")
            raise

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if not BOT_TOKEN:
        logging.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
        return
    
    if not CHANNEL_ID:
        logging.error("‚ùå CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
        return
    
    bot = NewsBot()
    await bot.start()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")