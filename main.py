import asyncio
import logging
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from news_collector import NewsCollector, parse_published_date
from telegram_publisher import TelegramPublisher
from air_alerts_monitor import AirAlertsMonitor
from memorial_messages import MemorialMessageScheduler
from config import CHECK_INTERVAL, MAX_POSTS_PER_CHECK

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NewsBot:
    def __init__(self):
        self.collector = NewsCollector()
        self.publisher = TelegramPublisher()
        self.alerts_monitor = AirAlertsMonitor(self.publisher)
        self.memorial_scheduler = MemorialMessageScheduler(self.publisher)
        self.is_running = False

    async def check_and_publish_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω"""
        try:
            logger.info("üîç –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
            
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
            news_list = self.collector.collect_all_news()
            
            if not news_list:
                logger.info("üì≠ –ù–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω")

            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —á–∞—Å–æ–º: –ø—É–±–ª—ñ–∫—É—î–º–æ –ª–∏—à–µ —Ç—ñ, —è–∫–∏–º –≤–∂–µ 10-20 —Ö–≤–∏–ª–∏–Ω
            now = datetime.now(timezone.utc)
            filtered_news = []
            for news in news_list:
                published_str = news.get('published', '')
                published_time = None
                if published_str:
                    published_time = parse_published_date(published_str)
                if published_time:
                    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –æ–±–∏–¥–≤—ñ –¥–∞—Ç–∏ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É timezone-aware/naive –ø—Ä–∏—Ä–æ–¥—É
                    if published_time.tzinfo is None:
                        # –Ø–∫—â–æ published_time timezone-naive, —Ä–æ–±–∏–º–æ —ó—ó UTC
                        published_time = published_time.replace(tzinfo=timezone.utc)
                    elif now.tzinfo is None:
                        # –Ø–∫—â–æ now timezone-naive (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—è), —Ä–æ–±–∏–º–æ —ó—ó UTC
                        now = now.replace(tzinfo=timezone.utc)
                    
                    age = (now - published_time).total_seconds() / 60
                    if 10 <= age <= 30:
                        filtered_news.append(news)
                else:
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞—Ç–∏ ‚Äî –¥–æ–¥–∞—î–º–æ, –∞–ª–µ –≤ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É
                    filtered_news.append(news)

            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –∑–∞ —Ä–∞–∑
            # –ü—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ —Ç–∞ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª —Ç–µ–ø–µ—Ä –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ NewsCollector
            news_to_publish = filtered_news[:MAX_POSTS_PER_CHECK]
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–∏–Ω–∏
            published_count = await self.publisher.publish_multiple_news(news_to_publish)
            
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ
            for news_item in news_to_publish:
                self.collector.mark_as_published(news_item['id'])
            
            logger.info(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {published_count} –Ω–æ–≤–∏–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ/–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω: {e}")

    async def test_connections(self):
        """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —É—Å—ñ–º–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏"""
        logger.info("üîß –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è...")
        
        # –¢–µ—Å—Ç—É—î–º–æ Telegram
        telegram_ok = await self.publisher.test_connection()
        if telegram_ok:
            logger.info("‚úÖ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω
        try:
            test_news = self.collector.collect_all_news()
            logger.info(f"‚úÖ –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω –ø—Ä–∞—Ü—é—î (–∑–Ω–∞–π–¥–µ–Ω–æ {len(test_news)} –Ω–æ–≤–∏–Ω)")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω: {e}")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ API —Ç—Ä–∏–≤–æ–≥
        try:
            test_alerts = await self.alerts_monitor.fetch_alerts()
            logger.info(f"‚úÖ API —Ç—Ä–∏–≤–æ–≥ –ø—Ä–∞—Ü—é—î (–æ—Ç—Ä–∏–º–∞–Ω–æ {len(test_alerts)} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥)")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API —Ç—Ä–∏–≤–æ–≥: {e}")
            return False
        
        return True

    async def run_once(self):
        """–ó–∞–ø—É—Å–∫–∞—î –æ–¥–∏–Ω —Ü–∏–∫–ª –∑–±–æ—Ä—É —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
        await self.check_and_publish_news()

    async def run_continuous(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        self.is_running = True
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º—ñ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∏–≤–æ–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ
        alerts_task = asyncio.create_task(self.alerts_monitor.monitor(interval=60))
        logger.info("üö® –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –∑–∞–ø—É—â–µ–Ω–∏–π (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫)")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ
        memorial_task = asyncio.create_task(self.memorial_scheduler.monitor_memorial_schedule(check_interval=300))
        logger.info("üïØÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–ø—É—â–µ–Ω–∏–π (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)")
        
        while self.is_running:
            try:
                await self.check_and_publish_news()
                logger.info(f"‚è∞ –û—á—ñ–∫—É—î–º–æ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
                await asyncio.sleep(CHECK_INTERVAL)
            except KeyboardInterrupt:
                logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        
        # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∏–≤–æ–≥ —Ç–∞ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        alerts_task.cancel()
        memorial_task.cancel()
        try:
            await alerts_task
        except asyncio.CancelledError:
            logger.info("üö® –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∏–≤–æ–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
        try:
            await memorial_task
        except asyncio.CancelledError:
            logger.info("üïØÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑—É–ø–∏–Ω–µ–Ω–æ")

    def stop(self):
        """–ó—É–ø–∏–Ω—è—î –±–æ—Ç–∞"""
        self.is_running = False
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = NewsBot()
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not await bot.test_connections():
            logger.error("‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω—å –Ω–µ –ø—Ä–æ–π—à–ª–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await bot.run_continuous()
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        bot.stop()
        await bot.publisher.close()
        logger.info("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

if __name__ == "__main__":
    print("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç")
    print("=" * 50)
    print("–ë–æ—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–∏—Ä–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª")
    print("—Ç–∞ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —ó—Ö —É –≤–∞—à Telegram –∫–∞–Ω–∞–ª.")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main()) 