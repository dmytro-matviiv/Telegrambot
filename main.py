import asyncio
import logging
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from news_collector import NewsCollector, parse_published_date
from telegram_publisher import TelegramPublisher
from air_alerts_monitor import AirAlertsMonitor
from memorial_messages import MemorialMessageScheduler, schedule_minute_of_silence
from config import CHECK_INTERVAL, MAX_POSTS_PER_CHECK, CHANNEL_ID
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NewsBot:
    def __init__(self):
        self.collector = NewsCollector()
        self.publisher = TelegramPublisher()
        self.alerts_monitor = AirAlertsMonitor(self.publisher)
        self.memorial_scheduler = MemorialMessageScheduler(self.publisher)
        self.is_running = False

    async def check_and_publish_news(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω–∏"""
        try:
            logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏...")
            
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
            all_news = self.collector.collect_all_news()
            
            if all_news:
                logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω")
                
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –Ω–æ–≤–∏–Ω (–º–∞–∫—Å–∏–º—É–º 3)
                news_to_publish = all_news[:3]
                logger.info(f"üì§ –ü—É–±–ª—ñ–∫—É—î–º–æ {len(news_to_publish)} –Ω–æ–≤–∏–Ω...")
                
                success = await self.publisher.publish_multiple_news(news_to_publish)
                
                if success:
                    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ
                    for news in news_to_publish:
                        news_id = f"{news['source_key']}_{news['id']}"
                        self.collector.mark_as_published(news_id, news['source_key'])
                    
                    logger.info("‚úÖ –ù–æ–≤–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ")
                else:
                    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω")
            else:
                logger.info("üì≠ –ù–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–≤–∏–Ω: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {traceback.format_exc()}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–æ–≤–∏–Ω...")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not await self.publisher.test_connection():
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram")
            return
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
        while True:
            try:
                await self.check_and_publish_news()
                logger.info(f"‚è∞ –û—á—ñ–∫—É—é {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
                await asyncio.sleep(CHECK_INTERVAL)
            except KeyboardInterrupt:
                logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        await self.publisher.close()
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = NewsBot()
    loop = asyncio.get_event_loop()
    
    # channel_id –º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —Ç—É—Ç
    channel_id = os.getenv("CHANNEL_ID")  # –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not await bot.publisher.test_connection():
            logger.error("‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω—å –Ω–µ –ø—Ä–æ–π—à–ª–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            return
        
        # –ú–µ–º–æ—Ä—ñ–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –≤ run_continuous()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        await bot.publisher.close()
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    print("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç")
    print("=" * 50)
    print("–ë–æ—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–∏—Ä–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª")
    print("—Ç–∞ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —ó—Ö —É –≤–∞—à Telegram –∫–∞–Ω–∞–ª.")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())