#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω —Ç–∞ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
"""

import asyncio
import logging
from datetime import datetime, time
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher
from memorial_messages import MemorialMessageScheduler

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_news_collection():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω...")
    
    collector = NewsCollector()
    
    # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
    news_list = collector.collect_all_news()
    
    if not news_list:
        logger.warning("‚ö†Ô∏è –ù–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    sources_count = {}
    video_count = 0
    
    for news in news_list:
        source = news.get('source', 'Unknown')
        sources_count[source] = sources_count.get(source, 0) + 1
        
        if news.get('video_url', ''):
            video_count += 1
    
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω:")
    logger.info(f"   üì∞ –í—Å—å–æ–≥–æ –Ω–æ–≤–∏–Ω: {len(news_list)}")
    logger.info(f"   üé• –ù–æ–≤–∏–Ω –∑ –≤—ñ–¥–µ–æ: {video_count}")
    logger.info(f"   üìã –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –¥–∂–µ—Ä–µ–ª–∞—Ö:")
    
    for source, count in sources_count.items():
        logger.info(f"      - {source}: {count} –Ω–æ–≤–∏–Ω")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ –π–¥—É—Ç—å –ø–µ—Ä—à–∏–º–∏
    first_5_with_video = sum(1 for news in news_list[:5] if news.get('video_url', ''))
    logger.info(f"   üéØ –ó –ø–µ—Ä—à–∏—Ö 5 –Ω–æ–≤–∏–Ω –º–∞—é—Ç—å –≤—ñ–¥–µ–æ: {first_5_with_video}")
    
    return news_list

async def test_memorial_messages():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π publisher –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    class FakePublisher:
        async def send_simple_message(self, text):
            logger.info(f"üì§ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{text}")
            return True
    
    fake_publisher = FakePublisher()
    scheduler = MemorialMessageScheduler(fake_publisher)
    
    # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    for i in range(3):
        message = scheduler.get_random_memorial_message()
        logger.info(f"üïØÔ∏è –ü—Ä–∏–∫–ª–∞–¥ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{i+1}:")
        logger.info(f"   {message[:100]}...")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É —á–∞—Å—É
    current_time = datetime.now().time()
    should_send = scheduler.should_send_memorial_message()
    
    logger.info(f"‚è∞ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time}")
    logger.info(f"üïØÔ∏è –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {should_send}")
    
    # –ü—Ä–∏–º—É—Å–æ–≤–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    logger.info("üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    await scheduler.send_memorial_message()

async def test_source_diversity():
    """–¢–µ—Å—Ç—É—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ –¥–∂–µ—Ä–µ–ª...")
    
    collector = NewsCollector()
    
    # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
    all_sources = []
    
    for i in range(3):
        logger.info(f"üîÑ –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω #{i+1}...")
        news_list = collector.collect_all_news()
        
        if news_list:
            sources_in_order = [news.get('source', 'Unknown') for news in news_list[:5]]
            all_sources.append(sources_in_order)
            logger.info(f"   üìã –ü–æ—Ä—è–¥–æ–∫ –¥–∂–µ—Ä–µ–ª: {sources_in_order}")
        
        await asyncio.sleep(2)  # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–±–æ—Ä–∞–º–∏
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å
    if all_sources:
        logger.info("üìä –ê–Ω–∞–ª—ñ–∑ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ:")
        for i, sources in enumerate(all_sources):
            unique_sources = len(set(sources))
            logger.info(f"   –ó–±—ñ—Ä #{i+1}: {unique_sources} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –∑ {len(sources)}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ –±–æ—Ç–∞")
    logger.info("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω
        await test_news_collection()
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç 2: –ú–µ–º–æ—Ä—ñ–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await test_memorial_messages()
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç 3: –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª
        await test_source_diversity()
        logger.info("=" * 60)
        
        logger.info("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        raise

if __name__ == "__main__":
    print("üá∫üá¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    asyncio.run(main())