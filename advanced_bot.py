#!/usr/bin/env python3
"""
–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏
"""

import asyncio
import logging
import time
from datetime import datetime, timezone
from advanced_collector import AdvancedNewsCollector
from telegram_publisher import TelegramPublisher
from config import CHECK_INTERVAL, MAX_POSTS_PER_CHECK

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('advanced_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AdvancedNewsBot:
    def __init__(self):
        self.collector = AdvancedNewsCollector()
        self.publisher = TelegramPublisher()
        self.is_running = False
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤–∞–∂–ª–∏–≤–∏—Ö –Ω–æ–≤–∏–Ω
        self.important_keywords = [
            '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–∑–µ–ª–µ–Ω—Å—å–∫–∏–π', '–∫–∞–±—ñ–Ω–µ—Ç –º—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤', '–≤–µ—Ä—Ö–æ–≤–Ω–∞ —Ä–∞–¥–∞',
            '–º—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–æ', '—É—Ä—è–¥', '–∑–∞–∫–æ–Ω', '–ø–æ—Å—Ç–∞–Ω–æ–≤–∞', '—É–∫–∞–∑—É',
            '–µ–∫–æ–Ω–æ–º—ñ–∫–∞', '—Ñ—ñ–Ω–∞–Ω—Å–∏', '–æ–±–æ—Ä–æ–Ω–∞', '–±–µ–∑–ø–µ–∫–∞', '–∫–æ—Ä–æ–Ω–∞–≤—ñ—Ä—É—Å',
            '–≤–∞–∫—Ü–∏–Ω–∞', '–∫–∞—Ä–∞–Ω—Ç–∏–Ω', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–æ—Å–≤—ñ—Ç–∞', '–∫—É–ª—å—Ç—É—Ä–∞'
        ]

    async def check_and_publish_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω"""
        try:
            logger.info("üîç –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
            
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª
            news_list = self.collector.collect_all_news_advanced()
            
            if not news_list:
                logger.info("üì≠ –ù–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            unique_news = self.collector.remove_duplicates(news_list)
            logger.info(f"üîÑ –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {len(unique_news)} –Ω–æ–≤–∏–Ω")
            logger.debug(f"üîÑ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {[n['title'] for n in unique_news]}")
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏
            important_news = self.collector.filter_news_by_keywords(
                unique_news, self.important_keywords
            )
            logger.info(f"‚≠ê –ó–Ω–∞–π–¥–µ–Ω–æ {len(important_news)} –≤–∞–∂–ª–∏–≤–∏—Ö –Ω–æ–≤–∏–Ω")
            logger.debug(f"‚≠ê –í–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏: {[n['title'] for n in important_news]}")
            
            if important_news:
                news_to_publish = important_news[:MAX_POSTS_PER_CHECK]
            else:
                news_to_publish = unique_news[:MAX_POSTS_PER_CHECK]
            
            logger.info(f"üì§ –ì–æ—Ç—É—î–º–æ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó {len(news_to_publish)} –Ω–æ–≤–∏–Ω")
            logger.debug(f"üì§ –ù–æ–≤–∏–Ω–∏ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {[n['title'] for n in news_to_publish]}")
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–∏–Ω–∏
            published_count = await self.publisher.publish_multiple_news(news_to_publish)
            logger.info(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {published_count} –Ω–æ–≤–∏–Ω")
            
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ
            for news_item in news_to_publish:
                self.collector.mark_as_published(news_item['id'])
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.collector.get_news_statistics()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_sources']} –¥–∂–µ—Ä–µ–ª, "
                       f"{stats['published_news_count']} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ/–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω: {e}")

    async def test_connections(self):
        """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —É—Å—ñ–º–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏"""
        logger.info("üîß –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è...")
        
        # –¢–µ—Å—Ç—É—î–º–æ Telegram
        telegram_ok = await self.publisher.test_connection()
        if telegram_ok:
            logger.info("‚úÖ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω
        try:
            test_news = self.collector.collect_all_news_advanced()
            logger.info(f"‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω –ø—Ä–∞—Ü—é—î (–∑–Ω–∞–π–¥–µ–Ω–æ {len(test_news)} –Ω–æ–≤–∏–Ω)")
            
            # –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é
            important_news = self.collector.filter_news_by_keywords(
                test_news, self.important_keywords
            )
            logger.info(f"‚úÖ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î (–∑–Ω–∞–π–¥–µ–Ω–æ {len(important_news)} –≤–∞–∂–ª–∏–≤–∏—Ö –Ω–æ–≤–∏–Ω)")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω: {e}")
            return False
        
        return True

    async def run_once(self):
        """–ó–∞–ø—É—Å–∫–∞—î –æ–¥–∏–Ω —Ü–∏–∫–ª –∑–±–æ—Ä—É —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
        await self.check_and_publish_news()

    async def run_continuous(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        self.is_running = True
        logger.info("üöÄ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º—ñ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏")
        
        while self.is_running:
            try:
                await self.check_and_publish_news()
                logger.info(f"‚è∞ –û—á—ñ–∫—É—î–º–æ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
                await asyncio.sleep(CHECK_INTERVAL)
            except KeyboardInterrupt:
                logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é

    def stop(self):
        """–ó—É–ø–∏–Ω—è—î –±–æ—Ç–∞"""
        self.is_running = False
        logger.info("üõë –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –±–æ—Ç–∞"""
    bot = AdvancedNewsBot()
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not await bot.test_connections():
            logger.error("‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω—å –Ω–µ –ø—Ä–æ–π—à–ª–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await bot.run_continuous()
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        bot.stop()
        await bot.publisher.close()
        logger.info("üëã –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

if __name__ == "__main__":
    print("üá∫üá¶ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç")
    print("=" * 60)
    print("–ë–æ—Ç –∑–±–∏—Ä–∞—î –Ω–æ–≤–∏–Ω–∏ –∑ –±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–∂–µ—Ä–µ–ª")
    print("—Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î –≤–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())