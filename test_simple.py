#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É
"""

import re
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def translate_text(text):
    """–ü—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É"""
    try:
        if not text or len(text.strip()) < 10:
            return text
        
        # –ü—Ä–æ—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        translations = {
            'ukraine': '–£–∫—Ä–∞—ó–Ω–∞',
            'ukrainian': '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π',
            'russia': '–†–æ—Å—ñ—è',
            'russian': '—Ä–æ—Å—ñ–π—Å—å–∫–∏–π',
            'war': '–≤—ñ–π–Ω–∞',
            'conflict': '–∫–æ–Ω—Ñ–ª—ñ–∫—Ç',
            'invasion': '–≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è',
            'military': '–≤—ñ–π—Å—å–∫–æ–≤–∏–π',
            'defense': '–æ–±–æ—Ä–æ–Ω–∞',
            'weapons': '–∑–±—Ä–æ—è',
            'sanctions': '—Å–∞–Ω–∫—Ü—ñ—ó',
            'zelensky': '–ó–µ–ª–µ–Ω—Å—å–∫–∏–π',
            'putin': '–ü—É—Ç—ñ–Ω',
            'kyiv': '–ö–∏—ó–≤',
            'kiev': '–ö–∏—ó–≤',
            'donetsk': '–î–æ–Ω–µ—Ü—å–∫',
            'luhansk': '–õ—É–≥–∞–Ω—Å—å–∫',
            'crimea': '–ö—Ä–∏–º',
            'breaking': '—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ',
            'news': '–Ω–æ–≤–∏–Ω–∏',
            'latest': '–æ—Å—Ç–∞–Ω–Ω—ñ',
            'update': '–æ–Ω–æ–≤–ª–µ–Ω–Ω—è',
            'report': '–∑–≤—ñ—Ç',
            'says': '–∫–∞–∂–µ',
            'said': '—Å–∫–∞–∑–∞–≤',
            'will': '–±—É–¥–µ',
            'has': '–º–∞—î',
            'have': '–º–∞—é—Ç—å',
            'is': '—î',
            'are': '—î',
            'was': '–±—É–≤',
            'were': '–±—É–ª–∏'
        }
        
        translated_text = text
        for eng_word, ukr_word in translations.items():
            # –ó–∞–º—ñ–Ω—é—î–º–æ —Å–ª–æ–≤–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ–≥—ñ—Å—Ç—Ä—É
            translated_text = re.sub(r'\b' + re.escape(eng_word) + r'\b', ukr_word, translated_text, flags=re.IGNORECASE)
        
        return translated_text
    except Exception as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
        return text

def is_english_text(text):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é"""
    if not text:
        return False
    
    # –ü—Ä–æ—Å—Ç—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
    english_indicators = ['the', 'and', 'for', 'with', 'this', 'that', 'will', 'have', 'been', 'from', 'they', 'said']
    text_lower = text.lower()
    english_count = sum(1 for word in english_indicators if word in text_lower)
    
    # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –±—ñ–ª—å—à–µ 2 –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤, –≤–≤–∞–∂–∞—î–º–æ —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º
    return english_count >= 2

def test_translation():
    """–¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–∫–ª–∞–¥—É...")
    
    test_texts = [
        "Ukraine war latest news",
        "Russia attacks Ukrainian cities",
        "Zelensky says Ukraine will win",
        "Breaking news from Kyiv",
        "Ukrainian military reports success"
    ]
    
    for text in test_texts:
        translated = translate_text(text)
        logger.info(f"–û—Ä–∏–≥—ñ–Ω–∞–ª: {text}")
        logger.info(f"–ü–µ—Ä–µ–∫–ª–∞–¥: {translated}")
        logger.info("---")
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏...")
    
    test_language_texts = [
        ("Ukraine war latest news", True),
        ("–£–∫—Ä–∞—ó–Ω–∞ –≤–µ–¥–µ –≤—ñ–π–Ω—É –∑ –†–æ—Å—ñ—î—é", False),
        ("Breaking news from Kyiv", True),
        ("–ù–æ–≤–∏–Ω–∏ –∑ –ö–∏—î–≤–∞", False),
        ("Russia attacks Ukrainian cities", True)
    ]
    
    for text, expected in test_language_texts:
        is_english = is_english_text(text)
        status = "‚úÖ" if is_english == expected else "‚ùå"
        logger.info(f"{status} '{text}' -> –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞: {is_english} (–æ—á—ñ–∫—É–≤–∞–Ω–æ: {expected})")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_translation() 