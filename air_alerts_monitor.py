import asyncio
import aiohttp
import logging
import os
from config import ALERTS_API_TOKEN, CHANNEL_ID
from telegram_publisher import TelegramPublisher

# –ú–∞–∫—Ä–æ—Ä–µ–≥—ñ–æ–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏
REGIONS = {
    '–ó–∞—Ö—ñ–¥': [
        '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–°—Ö—ñ–¥': [
        '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–ü—ñ–≤–Ω—ñ—á': [
        '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–ü—ñ–≤–¥–µ–Ω—å': [
        '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ê–† –ö—Ä–∏–º'
    ],
    '–¶–µ–Ω—Ç—Ä': [
        '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–º. –ö–∏—ó–≤'
    ]
}

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

class AirAlertsMonitor:
    def __init__(self, publisher: TelegramPublisher):
        self.publisher = publisher
        self.prev_alerts = set()  # {(location_title, alert_type)}

    async def fetch_alerts(self):
        headers = {}
        params = {}
        token = ALERTS_API_TOKEN or os.getenv('ALERTS_API_TOKEN')
        if not token:
            logging.warning("ALERTS_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
            return []
        headers['Authorization'] = f'Bearer {token}'
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, params=params, timeout=15) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ alerts.in.ua: {resp.status}")
                    return []

    def group_alerts(self, alerts):
        # –ü–æ–≤–µ—Ä—Ç–∞—î: (all_ukraine, {region: [–æ–±–ª–∞—Å—Ç—ñ]})
        oblasts = [a['location_title'] for a in alerts if a['location_type'] == 'oblast']
        if len(oblasts) >= 24:
            return True, {}
        region_map = {k: [] for k in REGIONS}
        for oblast in oblasts:
            for region, oblast_list in REGIONS.items():
                if oblast in oblast_list:
                    region_map[region].append(oblast)
        return False, region_map

    async def send_alert(self, text):
        await self.publisher.send_simple_message(text)

    async def monitor(self, interval=60):
        while True:
            try:
                alerts = await self.fetch_alerts()
                current_alerts = set((a['location_title'], a['alert_type']) for a in alerts)
                # –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏
                new_alerts = current_alerts - self.prev_alerts
                # –í—ñ–¥–±—ñ–π
                ended_alerts = self.prev_alerts - current_alerts
                # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–ª—è –º–∞—Å–æ–≤–∏—Ö —Ç—Ä–∏–≤–æ–≥
                all_ukraine, region_map = self.group_alerts(alerts)
                # –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ
                if all_ukraine and not any(('–£–∫—Ä–∞—ó–Ω–∞', 'air_raid') in self.prev_alerts for _ in [0]):
                    await self.send_alert("üî¥üö® –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ!")
                # –í—ñ–¥–±—ñ–π –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ
                if not all_ukraine and any(('–£–∫—Ä–∞—ó–Ω–∞', 'air_raid') in self.prev_alerts for _ in [0]):
                    await self.send_alert("üü¢‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ!")
                # –ü–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
                for region, oblasts in region_map.items():
                    if len(oblasts) == len(REGIONS[region]) and not any((region, 'air_raid') in self.prev_alerts for _ in [0]):
                        await self.send_alert(f"üî¥üö® –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –Ω–∞ {region} –£–∫—Ä–∞—ó–Ω–∏!")
                    if len(oblasts) < len(REGIONS[region]) and any((region, 'air_raid') in self.prev_alerts for _ in [0]):
                        await self.send_alert(f"üü¢‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –Ω–∞ {region} –£–∫—Ä–∞—ó–Ω–∏!")
                # –û–∫—Ä–µ–º—ñ –æ–±–ª–∞—Å—Ç—ñ
                for (loc, typ) in new_alerts:
                    if typ == 'air_raid':
                        await self.send_alert(f"üî¥ –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞! {loc}")
                for (loc, typ) in ended_alerts:
                    if typ == 'air_raid':
                        await self.send_alert(f"üü¢ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏! {loc}")
                self.prev_alerts = current_alerts
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç—Ä–∏–≤–æ–≥: {e}")
            await asyncio.sleep(interval)

# –î–æ–¥–∞—Ç–∏ —É TelegramPublisher –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
# async def send_simple_message(self, text: str):
#     await self.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode='HTML') 