import asyncio
import aiohttp
import logging
import os
from config import ALERTS_API_TOKEN, CHANNEL_ID
from telegram_publisher import TelegramPublisher
import datetime

# –ú–∞–∫—Ä–æ—Ä–µ–≥—ñ–æ–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏
REGIONS = {
    '–ó–∞—Ö—ñ–¥': [
        '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–°—Ö—ñ–¥': [
        '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–ü—ñ–≤–Ω—ñ—á': [
        '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–ü—ñ–≤–¥–µ–Ω—å': [
        '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ê–† –ö—Ä–∏–º'
    ],
    '–¶–µ–Ω—Ç—Ä': [
        '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–º. –ö–∏—ó–≤'
    ]
}

# –û–∫—É–ø–æ–≤–∞–Ω—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó —Ç–∞ –∑–æ–Ω–∏ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π (–Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—Ä–∏–≤–æ–≥–∏)
OCCUPIED_AND_COMBAT_AREAS = {
    '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ê–† –ö—Ä–∏–º', '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º',
    '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
}

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

class AirAlertsMonitor:
    def __init__(self, publisher: TelegramPublisher):
        self.publisher = publisher
        self.prev_alerts = set()  # {(location_title, alert_type)}

    async def fetch_alerts(self):
        headers = {}
        params = {}
        token = ALERTS_API_TOKEN or os.getenv('ALERTS_API_TOKEN')
        if not token:
            logging.warning("ALERTS_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
            return []
        headers['Authorization'] = f'Bearer {token}'
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, params=params, timeout=15) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API: {data}")
                    return data
                else:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ alerts.in.ua: {resp.status}")
                    return []

    def is_valid_alert(self, alert):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç—Ä–∏–≤–æ–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∞"""
        if not isinstance(alert, dict):
            return False
            
        location_title = alert.get('location_title', '')
        location_type = alert.get('location_type', '')
        alert_type = alert.get('alert_type', '')
        
        # –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
        if alert_type != 'air_raid':
            return False
            
        # –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–æ–≥–∏ –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö (–Ω–µ –ø–æ –≥—Ä–æ–º–∞–¥–∞—Ö, –º—ñ—Å—Ç–∞—Ö, —Ç–æ—â–æ)
        if location_type != 'oblast':
            return False
            
        # –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—Ä–∏–≤–æ–≥–∏ –≤ –æ–∫—É–ø–æ–≤–∞–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è—Ö —Ç–∞ –∑–æ–Ω–∞—Ö –±–æ–π–æ–≤–∏—Ö –¥—ñ–π
        if location_title in OCCUPIED_AND_COMBAT_AREAS:
            return False
            
        return True

    def group_alerts(self, alerts):
        # –ü–æ–≤–µ—Ä—Ç–∞—î: (all_ukraine, {region: [–æ–±–ª–∞—Å—Ç—ñ]})
        oblasts = []
        for alert in alerts:
            if self.is_valid_alert(alert):
                location_title = alert.get('location_title', '')
                if location_title:
                    oblasts.append(location_title)
        
        if len(oblasts) >= 24:
            return True, {}
        
        region_map = {k: [] for k in REGIONS}
        for oblast in oblasts:
            for region, oblast_list in REGIONS.items():
                if oblast in oblast_list:
                    region_map[region].append(oblast)
        return False, region_map

    async def send_alert(self, text):
        await self.publisher.send_simple_message(text)

    async def monitor(self, interval=60):
        while True:
            try:
                alerts_data = await self.fetch_alerts()
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö - API –ø–æ–≤–µ—Ä—Ç–∞—î {'alerts': [...]} –∞–±–æ —Å–ø–∏—Å–æ–∫
                if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
                    alerts_list = alerts_data['alerts']
                elif isinstance(alerts_data, list):
                    alerts_list = alerts_data
                else:
                    logging.warning(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö: {type(alerts_data)}")
                    await asyncio.sleep(interval)
                    continue

                # --- –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ/–º—ñ—Å—Ç—É ---
                # –ö–ª—é—á: (location_title, alert_type), –∑–Ω–∞—á–µ–Ω–Ω—è: alert (dict)
                current_alerts_dict = {}
                for alert in alerts_list:
                    if not self.is_valid_alert(alert):
                        continue
                        
                    location_title = alert.get('location_title', '')
                    alert_type = alert.get('alert_type', '')
                    finished_at = alert.get('finished_at')
                    started_at = alert.get('started_at', '')
                    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–¥—ñ—ó air_raid
                    if location_title and not finished_at:
                        current_alerts_dict[(location_title, alert_type)] = alert

                current_alerts = set(current_alerts_dict.keys())
                new_alerts = current_alerts - self.prev_alerts
                ended_alerts = self.prev_alerts - current_alerts

                # --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
                def format_alert_message(alert, is_end=False):
                    location = alert.get('location_title', '')
                    started_at = alert.get('started_at', '')
                    if is_end:
                        return f"‚úÖ <b>–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏</b> ‚Äî {location}"
                    msg = f"üö® <b>–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞</b> ‚Äî {location}"
                    if started_at:
                        msg += f"\n–ü–æ—á–∞—Ç–æ–∫: {started_at[:16].replace('T',' ')}"
                    return msg

                # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–¥—ñ–π (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—á–∞–ª–∏—Å—å –Ω–µ –±—ñ–ª—å—à–µ 2 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É) ---
                now = datetime.datetime.utcnow()
                for key in new_alerts:
                    alert = current_alerts_dict[key]
                    started_at = alert.get('started_at', '')
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—Ä–∏–≤–æ–≥–∞ –Ω–µ —Å—Ç–∞—Ä–∞
                    if started_at:
                        try:
                            started_dt = datetime.datetime.strptime(started_at[:19], "%Y-%m-%dT%H:%M:%S")
                        except Exception:
                            continue
                        delta = (now - started_dt).total_seconds() / 60
                        if delta > 2:
                            continue  # –ù–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç—Ä–∏–≤–æ–≥–∏
                    text = format_alert_message(alert, is_end=False)
                    await self.send_alert(text)

                # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–æ–¥—ñ–π ---
                for key in ended_alerts:
                    location, alert_type = key
                    if alert_type != 'air_raid':
                        continue
                    fake_alert = {'location_title': location}
                    text = format_alert_message(fake_alert, is_end=True)
                    await self.send_alert(text)

                self.prev_alerts = current_alerts

            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç—Ä–∏–≤–æ–≥: {e}")
                import traceback
                logging.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {traceback.format_exc()}")
            await asyncio.sleep(interval)

# –î–æ–¥–∞—Ç–∏ —É TelegramPublisher –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
# async def send_simple_message(self, text: str):
#     await self.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode='HTML') 