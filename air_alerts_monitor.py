import asyncio
import aiohttp
import logging
import os
from config import ALERTS_API_TOKEN, CHANNEL_ID
from telegram_publisher import TelegramPublisher

# –ú–∞–∫—Ä–æ—Ä–µ–≥—ñ–æ–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏
REGIONS = {
    '–ó–∞—Ö—ñ–¥': [
        '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–°—Ö—ñ–¥': [
        '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–ü—ñ–≤–Ω—ñ—á': [
        '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    ],
    '–ü—ñ–≤–¥–µ–Ω—å': [
        '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ê–† –ö—Ä–∏–º'
    ],
    '–¶–µ–Ω—Ç—Ä': [
        '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', '–º. –ö–∏—ó–≤'
    ]
}

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

class AirAlertsMonitor:
    def __init__(self, publisher: TelegramPublisher):
        self.publisher = publisher
        self.prev_alerts = set()  # {(location_title, alert_type)}

    async def fetch_alerts(self):
        headers = {}
        params = {}
        token = ALERTS_API_TOKEN or os.getenv('ALERTS_API_TOKEN')
        if not token:
            logging.warning("ALERTS_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
            return []
        headers['Authorization'] = f'Bearer {token}'
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, params=params, timeout=15) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API: {data}")
                    return data
                else:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ alerts.in.ua: {resp.status}")
                    return []

    def group_alerts(self, alerts):
        # –ü–æ–≤–µ—Ä—Ç–∞—î: (all_ukraine, {region: [–æ–±–ª–∞—Å—Ç—ñ]})
        oblasts = []
        for alert in alerts:
            if isinstance(alert, dict):
                location_title = alert.get('location_title', '')
                location_type = alert.get('location_type', '')
                if location_type == 'oblast' and location_title:
                    oblasts.append(location_title)
        
        if len(oblasts) >= 24:
            return True, {}
        
        region_map = {k: [] for k in REGIONS}
        for oblast in oblasts:
            for region, oblast_list in REGIONS.items():
                if oblast in oblast_list:
                    region_map[region].append(oblast)
        return False, region_map

    async def send_alert(self, text):
        await self.publisher.send_simple_message(text)

    async def monitor(self, interval=60):
        while True:
            try:
                alerts_data = await self.fetch_alerts()
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö - API –ø–æ–≤–µ—Ä—Ç–∞—î {'alerts': [...]} –∞–±–æ —Å–ø–∏—Å–æ–∫
                if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
                    alerts_list = alerts_data['alerts']
                elif isinstance(alerts_data, list):
                    alerts_list = alerts_data
                else:
                    logging.warning(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö: {type(alerts_data)}")
                    await asyncio.sleep(interval)
                    continue

                # --- –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ/–º—ñ—Å—Ç—É ---
                # –ö–ª—é—á: (location_title, alert_type), –∑–Ω–∞—á–µ–Ω–Ω—è: alert (dict)
                current_alerts_dict = {}
                for alert in alerts_list:
                    if not isinstance(alert, dict):
                        continue
                    alert_type = alert.get('alert_type', '')
                    location_title = alert.get('location_title', '')
                    finished_at = alert.get('finished_at')
                    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–¥—ñ—ó
                    if alert_type and location_title and not finished_at:
                        current_alerts_dict[(location_title, alert_type)] = alert

                current_alerts = set(current_alerts_dict.keys())
                new_alerts = current_alerts - self.prev_alerts
                ended_alerts = self.prev_alerts - current_alerts

                # --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
                def format_alert_message(alert, is_end=False):
                    alert_type = alert.get('alert_type', '')
                    location = alert.get('location_title', '')
                    started_at = alert.get('started_at', '')
                    notes = alert.get('notes', '')
                    # –ö–æ—Ä–æ—Ç–∫—ñ –Ω–∞–∑–≤–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
                    type_map = {
                        'air_raid': ('üö®', '–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞'),
                        'mig_takeoff': ('‚úàÔ∏è', '–ó–ª—ñ—Ç –ú—ñ–ì–∞'),
                        'missile_launch': ('üöÄ', '–ó–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏'),
                        'artillery_shelling': ('üí•', '–ê—Ä—Ç–æ–±—Å—Ç—Ä—ñ–ª'),
                        'urban_fights': ('‚öîÔ∏è', '–ë–æ—ó –≤ –º—ñ—Å—Ç—ñ'),
                        # –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
                    }
                    emoji, label = type_map.get(alert_type, ('‚ùó', alert_type))
                    if is_end:
                        if alert_type == 'air_raid':
                            emoji, label = '‚úÖ', '–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏'
                        else:
                            emoji = '‚úÖ'
                            label = f'–ö—ñ–Ω–µ—Ü—å –ø–æ–¥—ñ—ó: {label}'
                    msg = f"{emoji} <b>{label}</b> ‚Äî {location}"
                    if started_at and not is_end:
                        msg += f"\n–ü–æ—á–∞—Ç–æ–∫: {started_at[:16].replace('T',' ')}"
                    if notes:
                        msg += f"\n<i>{notes}</i>"
                    return msg

                # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–¥—ñ–π ---
                for key in new_alerts:
                    alert = current_alerts_dict[key]
                    text = format_alert_message(alert, is_end=False)
                    await self.send_alert(text)

                # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–æ–¥—ñ–π ---
                for key in ended_alerts:
                    # –î–ª—è ended_alerts —É –Ω–∞—Å –Ω–µ–º–∞—î –ø–æ–≤–Ω–æ–≥–æ alert, –∞–ª–µ —î (location, alert_type)
                    location, alert_type = key
                    fake_alert = {'alert_type': alert_type, 'location_title': location}
                    text = format_alert_message(fake_alert, is_end=True)
                    await self.send_alert(text)

                self.prev_alerts = current_alerts

            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç—Ä–∏–≤–æ–≥: {e}")
                import traceback
                logging.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {traceback.format_exc()}")
            await asyncio.sleep(interval)

# –î–æ–¥–∞—Ç–∏ —É TelegramPublisher –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
# async def send_simple_message(self, text: str):
#     await self.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode='HTML') 