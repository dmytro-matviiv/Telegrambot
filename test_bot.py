#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher
from config import NEWS_SOURCES

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_news_collection():
    """–¢–µ—Å—Ç—É—î –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
    
    collector = NewsCollector()
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –∑ –∫–æ–∂–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –æ–∫—Ä–µ–º–æ
        for source_key, source_info in NEWS_SOURCES.items():
            print(f"\nüì∞ –¢–µ—Å—Ç—É—î–º–æ {source_info['name']}...")
            
            news = collector.get_news_from_rss(source_key, source_info)
            
            if news:
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–∏–Ω")
                for i, item in enumerate(news[:3]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                    print(f"  {i+1}. {item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
            else:
                print("‚ùå –ù–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–±—ñ—Ä
        print(f"\nüîç –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
        all_news = collector.collect_all_news()
        print(f"‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏–Ω")
        
        return all_news
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ –Ω–æ–≤–∏–Ω: {e}")
        return []

async def test_telegram_connection():
    """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram"""
    print("\nü§ñ –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram...")
    
    publisher = TelegramPublisher()
    
    try:
        success = await publisher.test_connection()
        if success:
            print("‚úÖ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
        
        await publisher.close()
        return success
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ Telegram: {e}")
        return False

async def test_news_formatting():
    """–¢–µ—Å—Ç—É—î —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω"""
    print("\nüìù –¢–µ—Å—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω...")
    
    publisher = TelegramPublisher()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –Ω–æ–≤–∏–Ω—É
    test_news = {
        'title': '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –≤—ñ–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –±–æ—Ç–∞',
        'description': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.',
        'full_text': '–¶–µ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏. –í—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞.',
        'source': '–¢–µ—Å—Ç–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ',
        'link': 'https://example.com/test-news',
        'image_url': ''
    }
    
    try:
        formatted_text = publisher.format_news_text(test_news)
        print("‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î:")
        print("-" * 50)
        print(formatted_text)
        print("-" * 50)
        
        await publisher.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        return False

async def test_single_news_publish():
    """–¢–µ—Å—Ç—É—î –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –æ–¥–Ω—ñ—î—ó –Ω–æ–≤–∏–Ω–∏"""
    print("\nüì§ –¢–µ—Å—Ç—É—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –Ω–æ–≤–∏–Ω–∏...")
    
    publisher = TelegramPublisher()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –Ω–æ–≤–∏–Ω—É
    test_news = {
        'title': 'üß™ –¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –≤—ñ–¥ –±–æ—Ç–∞',
        'description': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞. –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±–æ—Ç –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
        'full_text': '–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏. –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–∏—Ä–∞—î, —Ñ–æ—Ä–º–∞—Ç—É—î —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω–∏ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.',
        'source': '–¢–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç',
        'link': 'https://t.me/your_channel',
        'image_url': ''
    }
    
    try:
        success = await publisher.publish_news(test_news)
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏")
        
        await publisher.close()
        return success
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üá∫üá¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω
    news = await test_news_collection()
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
    telegram_ok = await test_telegram_connection()
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    formatting_ok = await test_news_formatting()
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ Telegram –ø—Ä–∞—Ü—é—î)
    publish_ok = False
    if telegram_ok:
        publish_ok = await test_single_news_publish()
    
    # –ü—ñ–¥—Å—É–º–∫–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"üîç –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω: {'‚úÖ' if news else '‚ùå'}")
    print(f"ü§ñ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è: {'‚úÖ' if telegram_ok else '‚ùå'}")
    print(f"üìù –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {'‚úÖ' if formatting_ok else '‚ùå'}")
    print(f"üì§ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è: {'‚úÖ' if publish_ok else '‚ùå'}")
    
    if news and telegram_ok and formatting_ok:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
        print("üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å main.py –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞.")
    else:
        print("\n‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        if not telegram_ok:
            print("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN —Ç–∞ CHANNEL_ID –≤ .env —Ñ–∞–π–ª—ñ")
        if not news:
            print("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª –Ω–æ–≤–∏–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 