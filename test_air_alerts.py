import asyncio
import logging
from air_alerts_monitor import AirAlertsMonitor
from telegram_publisher import TelegramPublisher
import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_grouping_logic():
    """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤—ñ–¥–±–æ—ó–≤ —Ç—Ä–∏–≤–æ–≥"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ publisher
        class MockPublisher:
            async def send_simple_message(self, text):
                logger.info(f"üì§ –ú–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")
        
        publisher = MockPublisher()
        monitor = AirAlertsMonitor(publisher)
        
        logger.info("üß™ –¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤—ñ–¥–±–æ—ó–≤ —Ç—Ä–∏–≤–æ–≥...")
        
        # –°–∏–º—É–ª—é—î–º–æ –≤—ñ–¥–±–æ—ó —Ç—Ä–∏–≤–æ–≥ –≤ —Ä—ñ–∑–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö
        test_ended_alerts = [
            ('–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid'),
            ('–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid'),
            ('–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid')
        ]
        
        logger.info("üìù –î–æ–¥–∞—î–º–æ –≤—ñ–¥–±–æ—ó –¥–æ –±—É—Ñ–µ—Ä–∞...")
        monitor.add_to_ended_alerts_buffer(test_ended_alerts, {})
        
        logger.info(f"üìä –ë—É—Ñ–µ—Ä –º—ñ—Å—Ç–∏—Ç—å {len(monitor.ended_alerts_buffer)} –≤—ñ–¥–±–æ—ó–≤")
        for item in monitor.ended_alerts_buffer:
            logger.info(f"  - {item['location']} (—á–∞—Å: {item['time']})")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è...")
        grouped = monitor.get_grouped_end_alerts()
        
        if grouped:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É –≤—ñ–¥–±–æ—ó–≤: {', '.join(grouped)}")
        else:
            logger.info("‚ùå –ì—Ä—É–ø–∞ –≤—ñ–¥–±–æ—ó–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–∏–º—É–ª—é—î–º–æ —â–µ –æ–¥–∏–Ω –≤—ñ–¥–±—ñ–π
        logger.info("üìù –î–æ–¥–∞—î–º–æ —â–µ –æ–¥–∏–Ω –≤—ñ–¥–±—ñ–π...")
        additional_ended_alerts = [
            ('–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid')
        ]
        monitor.add_to_ended_alerts_buffer(additional_ended_alerts, {})
        
        logger.info(f"üìä –ë—É—Ñ–µ—Ä —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç–∏—Ç—å {len(monitor.ended_alerts_buffer)} –≤—ñ–¥–±–æ—ó–≤")
        
        # –ó–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
        grouped = monitor.get_grouped_end_alerts()
        if grouped:
            logger.info(f"‚úÖ –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É –≤—ñ–¥–±–æ—ó–≤: {', '.join(grouped)}")
        else:
            logger.info("‚ùå –ì—Ä—É–ø–∞ –≤—ñ–¥–±–æ—ó–≤ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π –∑ 2 –≤—ñ–¥–±–æ—è–º–∏ (–º–∞—î –≥—Ä—É–ø—É–≤–∞—Ç–∏—Å—è)
        logger.info("üìù –î–æ–¥–∞—î–º–æ —â–µ 2 –≤—ñ–¥–±–æ—ó –¥–ª—è —Ç–µ—Å—Ç—É –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è...")
        two_more_ended_alerts = [
            ('–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid'),
            ('–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid')
        ]
        monitor.add_to_ended_alerts_buffer(two_more_ended_alerts, {})
        
        logger.info(f"üìä –ë—É—Ñ–µ—Ä —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç–∏—Ç—å {len(monitor.ended_alerts_buffer)} –≤—ñ–¥–±–æ—ó–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è 2 –≤—ñ–¥–±–æ—ó–≤
        grouped = monitor.get_grouped_end_alerts()
        if grouped:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É –∑ 2 –≤—ñ–¥–±–æ—ó–≤: {', '.join(grouped)}")
        else:
            logger.info("‚ùå –ì—Ä—É–ø–∞ –∑ 2 –≤—ñ–¥–±–æ—ó–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π –∑ 1 –≤—ñ–¥–±–æ—î–º (–Ω–µ –º–∞—î –≥—Ä—É–ø—É–≤–∞—Ç–∏—Å—è)
        logger.info("üìù –î–æ–¥–∞—î–º–æ 1 –≤—ñ–¥–±—ñ–π (–Ω–µ –º–∞—î –≥—Ä—É–ø—É–≤–∞—Ç–∏—Å—è)...")
        single_ended_alert = [
            ('–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'air_raid')
        ]
        monitor.add_to_ended_alerts_buffer(single_ended_alert, {})
        
        logger.info(f"üìä –ë—É—Ñ–µ—Ä —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç–∏—Ç—å {len(monitor.ended_alerts_buffer)} –≤—ñ–¥–±–æ—ó–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è 1 –≤—ñ–¥–±–æ—é
        grouped = monitor.get_grouped_end_alerts()
        if grouped:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É –∑ 1 –≤—ñ–¥–±–æ—é: {', '.join(grouped)}")
        else:
            logger.info("‚ùå –ì—Ä—É–ø–∞ –∑ 1 –≤—ñ–¥–±–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (—Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –±—É—Ñ–µ—Ä–∞
        logger.info(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –±—É—Ñ–µ—Ä–∞: {len(monitor.ended_alerts_buffer)} –≤—ñ–¥–±–æ—ó–≤")
        for item in monitor.ended_alerts_buffer:
            logger.info(f"  - {item['location']} (—á–∞—Å: {item['time']})")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω–µ API
        logger.info("üåê –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω–µ API –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥...")
        try:
            alerts_data = await monitor.fetch_alerts()
            if alerts_data:
                logger.info(f"‚úÖ API –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ: {type(alerts_data)}")
                if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
                    alerts_list = alerts_data['alerts']
                elif isinstance(alerts_data, list):
                    alerts_list = alerts_data
                else:
                    alerts_list = []
                
                logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(alerts_list)} —Ç—Ä–∏–≤–æ–≥")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
                valid_count = 0
                for alert in alerts_list[:5]:
                    if monitor.is_valid_alert(alert):
                        valid_count += 1
                        location = alert.get('location_title', '–ù–µ–≤—ñ–¥–æ–º–æ')
                        alert_type = alert.get('alert_type', '')
                        logger.info(f"  - {location} ({alert_type})")
                
                logger.info(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: {valid_count}")
            else:
                logger.warning("‚ö†Ô∏è API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {traceback.format_exc()}")

if __name__ == "__main__":
    asyncio.run(test_grouping_logic()) 