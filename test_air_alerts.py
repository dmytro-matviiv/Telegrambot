import asyncio
import logging
from air_alerts_monitor import AirAlertsMonitor
from telegram_publisher import TelegramPublisher
from config import ALERTS_API_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_air_alerts():
    """–¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ publisher
        publisher = TelegramPublisher()
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
        if not await publisher.test_connection():
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
            return
        
        logger.info("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram —É—Å–ø—ñ—à–Ω–µ")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä —Ç—Ä–∏–≤–æ–≥
        monitor = AirAlertsMonitor(publisher)
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
        logger.info("üì° –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ API –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥...")
        alerts_data = await monitor.fetch_alerts()
        
        if alerts_data:
            logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API: {len(alerts_data) if isinstance(alerts_data, list) else 'dict'}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≤–æ–≥
            if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
                alerts_list = alerts_data['alerts']
            elif isinstance(alerts_data, list):
                alerts_list = alerts_data
            else:
                alerts_list = []
            
            air_raid_count = 0
            valid_alerts = []
            
            for alert in alerts_list:
                if monitor.is_valid_alert(alert):
                    air_raid_count += 1
                    valid_alerts.append(alert)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≤–æ–≥:")
            logger.info(f"   üì° –í—Å—å–æ–≥–æ —Ç—Ä–∏–≤–æ–≥: {len(alerts_list)}")
            logger.info(f"   üö® –ü–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: {air_raid_count}")
            logger.info(f"   ‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: {len(valid_alerts)}")
            
            if valid_alerts:
                logger.info("üìç –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:")
                for alert in valid_alerts[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                    location = alert.get('location_title', '–ù–µ–≤—ñ–¥–æ–º–æ')
                    started_at = alert.get('started_at', '')
                    logger.info(f"   - {location} (–ø–æ—á–∞–ª–∞—Å—è: {started_at})")
            
            # –¢–µ—Å—Ç—É—î–º–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.info("üì§ –¢–µ—Å—Ç—É—î–º–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            test_message = "üß™ –¢–µ—Å—Ç –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ - —Ü–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            success = await publisher.send_simple_message(test_message)
            
            if success:
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            else:
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ API")
        
        await publisher.close()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {traceback.format_exc()}")

if __name__ == "__main__":
    asyncio.run(test_air_alerts()) 