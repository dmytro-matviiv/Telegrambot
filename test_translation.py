#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–∞ –≤—ñ–¥–µ–æ
"""

import asyncio
import logging
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_translation_and_video():
    """–¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–∞ –≤—ñ–¥–µ–æ"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏
    collector = NewsCollector()
    publisher = TelegramPublisher()
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram...")
    if not await publisher.test_connection():
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram")
        return
    
    logger.info("‚úÖ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–∫–ª–∞–¥—É...")
    
    test_texts = [
        "Ukraine war latest news",
        "Russia attacks Ukrainian cities",
        "Zelensky says Ukraine will win",
        "Breaking news from Kyiv",
        "Ukrainian military reports success"
    ]
    
    for text in test_texts:
        translated = collector.translate_text(text)
        logger.info(f"–û—Ä–∏–≥—ñ–Ω–∞–ª: {text}")
        logger.info(f"–ü–µ—Ä–µ–∫–ª–∞–¥: {translated}")
        logger.info("---")
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏...")
    
    test_language_texts = [
        ("Ukraine war latest news", True),
        ("–£–∫—Ä–∞—ó–Ω–∞ –≤–µ–¥–µ –≤—ñ–π–Ω—É –∑ –†–æ—Å—ñ—î—é", False),
        ("Breaking news from Kyiv", True),
        ("–ù–æ–≤–∏–Ω–∏ –∑ –ö–∏—î–≤–∞", False),
        ("Russia attacks Ukrainian cities", True)
    ]
    
    for text, expected in test_language_texts:
        is_english = collector.is_english_text(text)
        status = "‚úÖ" if is_english == expected else "‚ùå"
        logger.info(f"{status} '{text}' -> –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞: {is_english} (–æ—á—ñ–∫—É–≤–∞–Ω–æ: {expected})")
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ URL
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ URL...")
    
    # –ú–æ–∫ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    mock_entry = {
        'summary': '<iframe src="https://www.youtube.com/embed/abc123"></iframe>',
        'link': 'https://example.com/article'
    }
    
    video_url = collector.extract_video_url(mock_entry, 'https://example.com/article')
    if video_url:
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–µ–æ URL: {video_url}")
    else:
        logger.info("‚ùå –í—ñ–¥–µ–æ URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    await publisher.close()
    logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_translation_and_video()) 