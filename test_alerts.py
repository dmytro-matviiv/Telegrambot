#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ —Ç—Ä–∏–≤–æ–≥
"""

import asyncio
import logging
from air_alerts_monitor import AirAlertsMonitor, OCCUPIED_AND_COMBAT_AREAS
from telegram_publisher import TelegramPublisher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_alerts_logic():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É —Ç—Ä–∏–≤–æ–≥"""
    publisher = TelegramPublisher()
    monitor = AirAlertsMonitor(publisher)
    
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É —Ç—Ä–∏–≤–æ–≥...")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
    telegram_ok = await publisher.test_connection()
    if not telegram_ok:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram")
        return
    
    logger.info("‚úÖ Telegram –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–∫—É–ø–æ–≤–∞–Ω—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
    logger.info("üö´ –û–∫—É–ø–æ–≤–∞–Ω—ñ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó —Ç–∞ –∑–æ–Ω–∏ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π (–Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—Ä–∏–≤–æ–≥–∏):")
    for area in OCCUPIED_AND_COMBAT_AREAS:
        logger.info(f"   - {area}")
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é —Ç—Ä–∏–≤–æ–≥
    test_alerts = [
        # –í–∞–ª—ñ–¥–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ (–ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ–π—Ç–∏)
        {
            'location_title': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
            'location_type': 'oblast',
            'alert_type': 'air_raid',
            'started_at': '2024-01-01T10:00:00Z',
            'finished_at': None
        },
        {
            'location_title': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
            'location_type': 'oblast',
            'alert_type': 'air_raid',
            'started_at': '2024-01-01T10:00:00Z',
            'finished_at': None
        },
        # –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ (–ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ)
        {
            'location_title': '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',  # –û–∫—É–ø–æ–≤–∞–Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è
            'location_type': 'oblast',
            'alert_type': 'air_raid',
            'started_at': '2024-01-01T10:00:00Z',
            'finished_at': None
        },
        {
            'location_title': '–ö–∏—ó–≤',  # –ú—ñ—Å—Ç–æ, –Ω–µ –æ–±–ª–∞—Å—Ç—å
            'location_type': 'city',
            'alert_type': 'air_raid',
            'started_at': '2024-01-01T10:00:00Z',
            'finished_at': None
        },
        {
            'location_title': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
            'location_type': 'oblast',
            'alert_type': 'artillery',  # –ù–µ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞
            'started_at': '2024-01-01T10:00:00Z',
            'finished_at': None
        }
    ]
    
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é —Ç—Ä–∏–≤–æ–≥...")
    valid_count = 0
    for i, alert in enumerate(test_alerts):
        is_valid = monitor.is_valid_alert(alert)
        status = "‚úÖ –ü–†–û–ô–®–û–í" if is_valid else "‚ùå –í–Ü–î–§–Ü–õ–¨–¢–†–û–í–ê–ù–û"
        logger.info(f"   –¢—Ä–∏–≤–æ–≥–∞ {i+1}: {status}")
        logger.info(f"      –û–±–ª–∞—Å—Ç—å: {alert['location_title']}")
        logger.info(f"      –¢–∏–ø: {alert['location_type']}")
        logger.info(f"      –¢—Ä–∏–≤–æ–≥–∞: {alert['alert_type']}")
        if is_valid:
            valid_count += 1
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {valid_count}/{len(test_alerts)} —Ç—Ä–∏–≤–æ–≥ –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ API
    logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ API...")
    alerts_data = await monitor.fetch_alerts()
    if alerts_data:
        logger.info("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –ª–æ–∫–∞—Ü—ñ–π
        location_types = set()
        location_titles = set()
        for alert in alerts_data.get('alerts', []):
            location_type = alert.get('location_type', '')
            location_title = alert.get('location_title', '')
            location_types.add(location_type)
            location_titles.add(location_title)
        
        logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(alerts_data.get('alerts', []))} —Ç—Ä–∏–≤–æ–≥")
        logger.info(f"üîç –¢–∏–ø–∏ –ª–æ–∫–∞—Ü—ñ–π –≤ API: {sorted(location_types)}")
        logger.info(f"üîç –ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–∞–∑–≤ –ª–æ–∫–∞—Ü—ñ–π: {sorted(list(location_titles)[:10])}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç—Ä–∏–≤–æ–≥–∏ –∑ "—Ä–∞–π–æ–Ω" –≤ –Ω–∞–∑–≤—ñ
        district_alerts = []
        for alert in alerts_data.get('alerts', []):
            location_title = alert.get('location_title', '')
            location_type = alert.get('location_type', '')
            alert_type = alert.get('alert_type', '')
            if '—Ä–∞–π–æ–Ω' in location_title.lower():
                district_alerts.append({
                    'title': location_title,
                    'type': location_type,
                    'alert_type': alert_type
                })
        
        if district_alerts:
            logger.info(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(district_alerts)} —Ç—Ä–∏–≤–æ–≥ –∑ '—Ä–∞–π–æ–Ω' –≤ –Ω–∞–∑–≤—ñ:")
            for alert in district_alerts:
                logger.info(f"    - {alert['title']} (—Ç–∏–ø: {alert['type']}, —Ç—Ä–∏–≤–æ–≥–∞: {alert['alert_type']})")
        else:
            logger.info("‚úÖ –¢—Ä–∏–≤–æ–≥ –∑ '—Ä–∞–π–æ–Ω' –≤ –Ω–∞–∑–≤—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–∏–≤–æ–≥–∏
        valid_alerts = []
        for alert in alerts_data.get('alerts', []):
            if monitor.is_valid_alert(alert):
                valid_alerts.append(alert)
        
        logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(alerts_data.get('alerts', []))} —Ç—Ä–∏–≤–æ–≥, {len(valid_alerts)} –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
        if valid_alerts:
            logger.info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:")
            for alert in valid_alerts:
                location = alert.get('location_title', '')
                location_type = alert.get('location_type', '')
                alert_type = alert.get('alert_type', '')
                logger.info(f"    - {location} (—Ç–∏–ø: {location_type}, —Ç—Ä–∏–≤–æ–≥–∞: {alert_type})")
        else:
            logger.info("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ API")
    
    await publisher.close()

if __name__ == "__main__":
    asyncio.run(test_alerts_logic()) 