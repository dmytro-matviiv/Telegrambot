#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from news_collector import NewsCollector
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_published_news():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–∞–π–ª –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏"""
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        with open('published_news.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        published_news = data.get('published_news', [])
        
        logger.info(f"üìä –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ —É —Ñ–∞–π–ª—ñ: {len(published_news)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_news = set()
        duplicates = []
        
        for news_id in published_news:
            if news_id in unique_news:
                duplicates.append(news_id)
            else:
                unique_news.add(news_id)
        
        logger.info(f"‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: {len(unique_news)}")
        logger.info(f"‚ùå –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(duplicates)}")
        
        if duplicates:
            logger.info("üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏:")
            for dup in duplicates[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                logger.info(f"   {dup}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ ID
        logger.info("üìù –ü—Ä–∏–∫–ª–∞–¥–∏ ID –Ω–æ–≤–∏–Ω:")
        for i, news_id in enumerate(published_news[:5]):
            logger.info(f"   {i+1}. {news_id}")
        
        return len(duplicates) > 0
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
        return False

def fix_published_news():
    """–í–∏–ø—Ä–∞–≤–ª—è—î —Ñ–∞–π–ª –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω, –≤–∏–¥–∞–ª—è—é—á–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏"""
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        with open('published_news.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        published_news = data.get('published_news', [])
        original_count = len(published_news)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        unique_news = list(set(published_news))
        new_count = len(unique_news)
        
        logger.info(f"üìä –ë—É–ª–æ –∑–∞–ø–∏—Å—ñ–≤: {original_count}")
        logger.info(f"üìä –°—Ç–∞–ª–æ –∑–∞–ø–∏—Å—ñ–≤: {new_count}")
        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {original_count - new_count}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        data['published_news'] = unique_news
        
        with open('published_news.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ –§–∞–π–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ: {e}")
        return False

def test_news_collection():
    """–¢–µ—Å—Ç—É—î –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏"""
    try:
        collector = NewsCollector()
        
        logger.info("üîç –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
        all_news = collector.collect_all_news()
        
        if all_news:
            logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ ID
            logger.info("üìù –ü—Ä–∏–∫–ª–∞–¥–∏ ID –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω:")
            for i, news in enumerate(all_news[:3]):
                news_id = f"{news['source_key']}_{news['id']}"
                logger.info(f"   {i+1}. {news_id}")
                logger.info(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title'][:50]}...")
        else:
            logger.info("üì≠ –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")

if __name__ == "__main__":
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–æ–≤–∏–Ω")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    has_duplicates = check_published_news()
    
    if has_duplicates:
        print("\nüóëÔ∏è –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏...")
        fix_published_news()
    
    print("\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
    test_news_collection()
