#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from air_alerts_monitor import AirAlertsMonitor
from telegram_publisher import TelegramPublisher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_alerts_monitor():
    """–¢–µ—Å—Ç—É—î –º–æ–Ω—ñ—Ç–æ—Ä –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ publisher
        publisher = TelegramPublisher()
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if not await publisher.test_connection():
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram")
            return
        
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram —É—Å–ø—ñ—à–Ω–µ")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä
        monitor = AirAlertsMonitor(publisher)
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        logger.info("üì° –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ API...")
        alerts_data = await monitor.fetch_alerts()
        
        if alerts_data:
            logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
                alerts_list = alerts_data['alerts']
            elif isinstance(alerts_data, list):
                alerts_list = alerts_data
            else:
                alerts_list = []
            
            logger.info(f"üìä –í—Å—å–æ–≥–æ —Ç—Ä–∏–≤–æ–≥: {len(alerts_list)}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
            active_air_raids = []
            for alert in alerts_list:
                if monitor.is_valid_alert(alert):
                    active_air_raids.append(alert)
            
            logger.info(f"üö® –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: {len(active_air_raids)}")
            
            if active_air_raids:
                logger.info("üìç –ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:")
                for alert in active_air_raids:
                    location = alert.get('location_title', '–ù–µ–≤—ñ–¥–æ–º–æ')
                    started_at = alert.get('started_at', '')
                    logger.info(f"   - {location} (–ø–æ—á–∞–ª–∞—Å—è: {started_at})")
            
            # –¢–µ—Å—Ç—É—î–º–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.info("üì§ –¢–µ—Å—Ç—É—î–º–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            test_message = "üö® <b>–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞</b> ‚Äî –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"
            success = await publisher.send_simple_message(test_message)
            
            if success:
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            else:
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ API")
        
        await publisher.close()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_alerts_monitor())
