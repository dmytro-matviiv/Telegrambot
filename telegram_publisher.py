import asyncio
import aiohttp
import logging
from typing import Dict, Optional
from telegram import Bot
from telegram.error import TelegramError
from PIL import Image
import io
import requests
from config import BOT_TOKEN, CHANNEL_ID, DEFAULT_IMAGE_URL, MAX_TEXT_LENGTH, IMAGE_DOWNLOAD_TIMEOUT
import random
from bs4 import BeautifulSoup
import os

logger = logging.getLogger(__name__)

class TelegramPublisher:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.session = aiohttp.ClientSession()

    async def download_image(self, image_url: str) -> Optional[bytes]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ URL –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
        try:
            if not image_url:
                return None
                
            # –Ø–∫—â–æ —Ü–µ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
            if image_url.startswith('file://'):
                file_path = image_url[7:]  # –í–∏–¥–∞–ª—è—î–º–æ 'file://'
                try:
                    with open(file_path, 'rb') as f:
                        return f.read()
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É {file_path}: {e}")
                    return None
            elif image_url == DEFAULT_IMAGE_URL:
                # –î–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                try:
                    with open('default_ua_news.jpg', 'rb') as f:
                        return f.read()
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                    return None
                
            # –î–ª—è URL
            async with self.session.get(image_url, timeout=IMAGE_DOWNLOAD_TIMEOUT) as response:
                if response.status == 200:
                    return await response.read()
                else:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            return None

    def format_news_text(self, news_item: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ –¥–ª—è Telegram"""
        title = news_item.get('title', '')
        description = news_item.get('description', '')
        link = news_item.get('link', '')
        source = news_item.get('source', '')
        category = news_item.get('category', 'unknown')
        
        # –ï–º–æ–¥–∑—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        category_emojis = {
            'world': 'üåç',
            'ukraine': 'üá∫üá¶',
            'inventions': 'üî¨',
            'celebrity': '‚≠ê',
            'war': '‚öîÔ∏è'
        }
        
        category_emoji = category_emojis.get(category, 'üì∞')
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –¥–ª—è Telegram (1024 —Å–∏–º–≤–æ–ª–∏)
        max_length = 900  # –ó–∞–ª–∏—à–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –¥–∂–µ—Ä–µ–ª–∞
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = f"{category_emoji} <b>{title}</b>\n\n"
        
        if description:
            # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(description) > max_length - len(text):
                description = description[:max_length - len(text) - 3] + "..."
            text += f"{description}\n\n"
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –¥–∂–µ—Ä–µ–ª–æ
        text += f"üì∞ <a href='{link}'>–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é</a>\n"
        text += f"üìå –î–∂–µ—Ä–µ–ª–æ: {source}"
        
        return text

    def clean_html(self, text: str) -> str:
        """–û—á–∏—â–∞—î HTML –≤—ñ–¥ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø–æ–º–∏–ª–∫–∏"""
        try:
            soup = BeautifulSoup(text, 'html.parser')
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–µ–≥–∏ –∫—Ä—ñ–º –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
            for tag in soup.find_all(True):
                if tag.name not in ['b', 'i', 'a', 'u', 's', 'code', 'pre']:
                    tag.unwrap()
            
            # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            for link in soup.find_all('a'):
                href = link.get('href')
                if not href or href.strip() == '':
                    # –Ø–∫—â–æ href –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤–∏–¥–∞–ª—è—î–º–æ —Ç–µ–≥
                    link.unwrap()
                elif not href.startswith(('http://', 'https://')):
                    # –Ø–∫—â–æ href –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º URL, –≤–∏–¥–∞–ª—è—î–º–æ —Ç–µ–≥
                    link.unwrap()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
            for tag in soup.find_all(True):
                attrs_to_remove = []
                for attr, value in tag.attrs.items():
                    if value == '' or value is None:
                        attrs_to_remove.append(attr)
                for attr in attrs_to_remove:
                    del tag[attr]
            
            return str(soup)
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ HTML: {e}")
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ HTML, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
            return BeautifulSoup(text, 'html.parser').get_text()

    async def publish_news(self, news_item: Dict) -> bool:
        """–ü—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω—É –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            text = self.format_news_text(news_item)
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
            image_url = news_item.get('image_url', '')
            image_data = await self.download_image(image_url)

            if image_data:
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
                await self.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=image_data,
                    caption=text,
                    parse_mode='HTML'
                )
                logger.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º: {news_item.get('title', '')[:50]}...")
            else:
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                await self.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=text,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
                logger.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {news_item.get('title', '')[:50]}...")
            
            return True
            
        except TelegramError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
            return False
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
            return False

    async def publish_multiple_news(self, news_list: list) -> int:
        published_count = 0
        for news_item in news_list:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤
            news_item['title'] = self.clean_html(news_item.get('title', ''))
            news_item['description'] = self.clean_html(news_item.get('description', ''))
            news_item['full_text'] = self.clean_html(news_item.get('full_text', ''))
            text = self.format_news_text(news_item)
            text = self.clean_html(text)
            
            try:
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
                image_url = news_item.get('image_url', '')
                image_data = await self.download_image(image_url)
                
                if image_data:
                    await self.bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=image_data,
                        caption=text,
                        parse_mode='HTML'
                    )
                    logger.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º: {news_item.get('title', '')[:50]}...")
                else:
                    await self.bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=text,
                        parse_mode='HTML',
                        disable_web_page_preview=False
                    )
                    logger.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {news_item.get('title', '')[:50]}...")
                
                published_count += 1
                break  # –ü—É–±–ª—ñ–∫—É—î–º–æ –ª–∏—à–µ –æ–¥–Ω—É —É—Å–ø—ñ—à–Ω—É –Ω–æ–≤–∏–Ω—É –∑–∞ —Ä–∞–∑
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
                continue  # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî –ø—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –Ω–æ–≤–∏–Ω—É
        return published_count

    async def send_simple_message(self, text: str) -> bool:
        try:
            await self.bot.send_message(
                chat_id=CHANNEL_ID,
                text=text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {text[:50]}...")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
            return False

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram"""
        try:
            me = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π: @{me.username}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É
            chat = await self.bot.get_chat(CHANNEL_ID)
            logger.info(f"–ö–∞–Ω–∞–ª –∑–Ω–∞–π–¥–µ–Ω–æ: {chat.title}")
            
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram: {e}")
            return False

    async def close(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        await self.session.close()

