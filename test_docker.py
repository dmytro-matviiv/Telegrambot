#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Docker –∑–±—ñ—Ä–∫–∏ –¥–ª—è –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import subprocess
import sys
import os

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} —É—Å–ø—ñ—à–Ω–æ")
            if result.stdout:
                print(f"–í–∏–≤—ñ–¥: {result.stdout}")
        else:
            print(f"‚ùå {description} –Ω–µ–≤–¥–∞–ª–æ")
            if result.stderr:
                print(f"–ü–æ–º–∏–ª–∫–∞: {result.stderr}")
            if result.stdout:
                print(f"–í–∏–≤—ñ–¥: {result.stdout}")
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üê≥ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Docker –∑–±—ñ—Ä–∫–∏ –¥–ª—è –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Docker
    if not run_command("docker --version", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker"):
        print("‚ùå Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Desktop.")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å docker-compose
    if not run_command("docker-compose --version", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ docker-compose"):
        print("‚ùå docker-compose –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å docker-compose.")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
    required_files = [
        "requirements-docker-minimal.txt",
        "Dockerfile",
        "docker-compose.yml",
        ".dockerignore"
    ]
    
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä–∫—É Docker –æ–±—Ä–∞–∑—É
    print("\nüî® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±—ñ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑—É...")
    if run_command("docker build -t test-telegram-bot .", "–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É"):
        print("‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ")
        
        # –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–∞–∑
        run_command("docker rmi test-telegram-bot", "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑—É")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑—É")
        return False
    
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
    print("   docker-compose up --build")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
