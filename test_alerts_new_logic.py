#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ —Ç—Ä–∏–≤–æ–≥ - —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏
"""

import asyncio
import logging
from air_alerts_monitor import AirAlertsMonitor
from telegram_publisher import TelegramPublisher
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_new_alerts_logic():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É —Ç—Ä–∏–≤–æ–≥"""
    logger.info("üö® –¢–µ—Å—Ç—É—î–º–æ –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É —Ç—Ä–∏–≤–æ–≥...")
    
    publisher = TelegramPublisher()
    monitor = AirAlertsMonitor(publisher)
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    alerts_data = await monitor.fetch_alerts()
    
    if not alerts_data:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ç—Ä–∏–≤–æ–≥")
        return
    
    logger.info("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API —Ç—Ä–∏–≤–æ–≥")
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
    if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
        alerts_list = alerts_data['alerts']
    elif isinstance(alerts_data, list):
        alerts_list = alerts_data
    else:
        logger.error("‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
        return
    
    logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(alerts_list)} —Ç—Ä–∏–≤–æ–≥ –≤ API")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
    valid_alerts = []
    for alert in alerts_list:
        if monitor.is_valid_alert(alert):
            valid_alerts.append(alert)
    
    logger.info(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: {len(valid_alerts)}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–æ–∂–Ω–æ—ó –≤–∞–ª—ñ–¥–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
    now = datetime.utcnow()
    for i, alert in enumerate(valid_alerts):
        location = alert.get('location_title', '')
        started_at = alert.get('started_at', '')
        finished_at = alert.get('finished_at', '')
        
        logger.info(f"\n{i+1}. –¢—Ä–∏–≤–æ–≥–∞: {location}")
        logger.info(f"   –ü–æ—á–∞—Ç–æ–∫: {started_at}")
        logger.info(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {finished_at}")
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É
        if started_at:
            try:
                started_dt = datetime.strptime(started_at[:19], "%Y-%m-%dT%H:%M:%S")
                delta = (now - started_dt).total_seconds() / 60
                logger.info(f"   –í—ñ–¥ –ø–æ—á–∞—Ç–∫—É: {delta:.1f} —Ö–≤–∏–ª–∏–Ω")
                
                if delta > 2:
                    logger.warning(f"   ‚ö†Ô∏è –¢—Ä–∏–≤–æ–≥–∞ —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ 2 —Ö–≤ - –±—É–¥–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                else:
                    logger.info(f"   ‚úÖ –¢—Ä–∏–≤–æ–≥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ - –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞")
            except Exception as e:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É: {e}")
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –≤—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if finished_at:
            try:
                finished_dt = datetime.strptime(finished_at[:19], "%Y-%m-%dT%H:%M:%S")
                delta = (now - finished_dt).total_seconds() / 60
                logger.info(f"   –í—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {delta:.1f} —Ö–≤–∏–ª–∏–Ω")
                
                if delta > 2:
                    logger.warning(f"   ‚ö†Ô∏è –í—ñ–¥–±—ñ–π —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ 2 —Ö–≤ - –±—É–¥–µ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π")
                else:
                    logger.info(f"   ‚úÖ –í—ñ–¥–±—ñ–π –∞–∫—Ç—É–∞–ª—å–Ω–∏–π - –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π")
            except Exception as e:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É –≤—ñ–¥–±–æ—é: {e}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
    logger.info("\nüîÑ –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫...")
    monitor.is_first_run = True
    monitor.prev_alerts = set()
    
    # –°–∏–º—É–ª—é—î–º–æ –ø–µ—Ä—à–∏–π —Ü–∏–∫–ª
    alerts_data = await monitor.fetch_alerts()
    if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
        alerts_list = alerts_data['alerts']
    elif isinstance(alerts_data, list):
        alerts_list = alerts_data
    else:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ —Ç—Ä–∏–≤–æ–≥–∏
    current_alerts_dict = {}
    for alert in alerts_list:
        if not monitor.is_valid_alert(alert):
            continue
            
        location_title = alert.get('location_title', '')
        alert_type = alert.get('alert_type', '')
        finished_at = alert.get('finished_at')
        
        if location_title and not finished_at:
            current_alerts_dict[(location_title, alert_type)] = alert
    
    current_alerts = set(current_alerts_dict.keys())
    
    logger.info(f"üìä –¢—Ä–∏–≤–æ–≥ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É: {len(current_alerts)}")
    logger.info("‚úÖ –ü—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É —Ç—Ä–∏–≤–æ–≥–∏ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è")
    
    # –¢–µ—Å—Ç—É—î–º–æ –¥—Ä—É–≥–∏–π —Ü–∏–∫–ª (–ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
    logger.info("\nüîÑ –¢–µ—Å—Ç—É—î–º–æ –¥—Ä—É–≥–∏–π —Ü–∏–∫–ª (–ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É)...")
    monitor.is_first_run = False
    monitor.prev_alerts = current_alerts  # –°–∏–º—É–ª—é—î–º–æ, —â–æ —Ü–µ –≤–∂–µ –Ω–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
    
    # –°–∏–º—É–ª—é—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏
    new_alerts = set()
    for key in list(current_alerts)[:2]:  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 2 —Ç—Ä–∏–≤–æ–≥–∏ —è–∫ –Ω–æ–≤—ñ
        new_alerts.add(key)
    
    logger.info(f"üìä –ù–æ–≤–∏—Ö —Ç—Ä–∏–≤–æ–≥ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {len(new_alerts)}")
    
    for key in new_alerts:
        alert = current_alerts_dict[key]
        location = alert.get('location_title', '')
        started_at = alert.get('started_at', '')
        
        logger.info(f"üéØ –ù–æ–≤–∞ —Ç—Ä–∏–≤–æ–≥–∞: {location}")
        if started_at:
            try:
                started_dt = datetime.strptime(started_at[:19], "%Y-%m-%dT%H:%M:%S")
                delta = (now - started_dt).total_seconds() / 60
                logger.info(f"   –ß–∞—Å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É: {delta:.1f} —Ö–≤")
                
                if delta > 2:
                    logger.warning(f"   ‚ö†Ô∏è –¢—Ä–∏–≤–æ–≥–∞ —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ 2 —Ö–≤ - –Ω–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞")
                else:
                    logger.info(f"   ‚úÖ –¢—Ä–∏–≤–æ–≥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ - –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞")
            except Exception as e:
                logger.error(f"   –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É: {e}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    print("üö® –¢–µ—Å—Ç –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ —Ç—Ä–∏–≤–æ–≥")
    print("=" * 50)
    
    asyncio.run(test_new_alerts_logic()) 