import asyncio
import logging
import json
import random
from datetime import datetime, time
import pytz
from telegram_publisher import TelegramPublisher

logger = logging.getLogger(__name__)

class MemorialMessageScheduler:
    def __init__(self, publisher: TelegramPublisher):
        self.publisher = publisher
        self.last_sent_date = self.load_last_sent_date()
        
        # –®–∞–±–ª–æ–Ω–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.memorial_templates = [
            "üïØÔ∏è –•–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è –Ω–∞ –∑–≥–∞–¥–∫—É –ø—Ä–æ –∑–∞–≥–∏–±–ª–∏—Ö –≥–µ—Ä–æ—ó–≤ –£–∫—Ä–∞—ó–Ω–∏",
            "üïØÔ∏è –í—à–∞–Ω—É—î–º–æ –ø–∞–º'—è—Ç—å —Ç–∏—Ö, —Ö—Ç–æ –≤—ñ–¥–¥–∞–≤ –∂–∏—Ç—Ç—è –∑–∞ –£–∫—Ä–∞—ó–Ω—É",
            "üïØÔ∏è –•–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è –Ω–∞ –∑–≥–∞–¥–∫—É –ø—Ä–æ –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏",
            "üïØÔ∏è –í—à–∞–Ω—É—î–º–æ –ø–∞–º'—è—Ç—å –≥–µ—Ä–æ—ó–≤, —è–∫—ñ –∑–∞—Ö–∏—â–∞–ª–∏ –Ω–∞—à—É –∑–µ–º–ª—é",
            "üïØÔ∏è –•–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è –Ω–∞ –∑–≥–∞–¥–∫—É –ø—Ä–æ –≤—Å—ñ—Ö –∑–∞–≥–∏–±–ª–∏—Ö –∑–∞ –£–∫—Ä–∞—ó–Ω—É"
        ]

    def load_last_sent_date(self) -> str:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            with open('memorial_last_sent.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('last_sent_date', '')
        except FileNotFoundError:
            return ''
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏: {e}")
            return ''

    def save_last_sent_date(self, date: str):
        """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            with open('memorial_last_sent.json', 'w', encoding='utf-8') as f:
                json.dump({'last_sent_date': date}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞—Ç–∏: {e}")

    def get_random_memorial_message(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–µ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        return random.choice(self.memorial_templates)

    def should_send_memorial_message(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
        kiev_tz = pytz.timezone('Europe/Kiev')
        current_time = datetime.now(kiev_tz)
        current_date = current_time.strftime('%Y-%m-%d')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å 9:00
        target_time = time(9, 0)
        current_time_only = current_time.time()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
        if self.last_sent_date == current_date:
            logger.info(f"[Minute of Silence] –°—å–æ–≥–æ–¥–Ω—ñ ({current_date}) –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å 9:00 (–∑ –¥–æ–ø—É—Å–∫–æ–º ¬±1 —Ö–≤–∏–ª–∏–Ω–∞)
        time_diff = abs((current_time_only.hour * 60 + current_time_only.minute) - 
                       (target_time.hour * 60 + target_time.minute))
        
        if time_diff <= 1:
            logger.info(f"[Minute of Silence] –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time_only}, –¥–∞—Ç–∞: {current_date}")
            logger.info(f"[Minute of Silence] –û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {self.last_sent_date}")
            logger.info("[Minute of Silence] –£–º–æ–≤–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
            return True
        
        return False

    async def send_memorial_message(self) -> bool:
        """–ù–∞–¥—Å–∏–ª–∞—î –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            message = self.get_random_memorial_message()
            logger.info(f"[Minute of Silence] –ù–∞–¥—Å–∏–ª–∞—é –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
            
            success = await self.publisher.send_simple_message(message)
            
            if success:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
                kiev_tz = pytz.timezone('Europe/Kiev')
                current_date = datetime.now(kiev_tz).strftime('%Y-%m-%d')
                self.save_last_sent_date(current_date)
                self.last_sent_date = current_date
                logger.info(f"[Minute of Silence] ‚úÖ –ú–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
                return True
            else:
                logger.error("[Minute of Silence] ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return False
                
        except Exception as e:
            logger.error(f"[Minute of Silence] ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False

    async def check_and_send_memorial(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
        logger.info("[Minute of Silence] –ü–µ—Ä–µ–≤—ñ—Ä—è—é —É–º–æ–≤–∏ –¥–ª—è –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        
        if self.should_send_memorial_message():
            await self.send_memorial_message()

    async def monitor_memorial_schedule(self, check_interval: int = 60):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ä–æ–∑–∫–ª–∞–¥ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        logger.info(f"[Minute of Silence] üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ {check_interval} —Å–µ–∫)")
        
        while True:
            try:
                await self.check_and_send_memorial()
                await asyncio.sleep(check_interval)
            except Exception as e:
                logger.error(f"[Minute of Silence] –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(check_interval)
