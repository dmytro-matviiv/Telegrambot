#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
"""

import asyncio
import logging
from datetime import datetime, time
import sys
import os

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–º—ñ—Ç–∞—Ü—ñ—è TelegramPublisher –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
class FakePublisher:
    async def send_simple_message(self, text):
        logger.info("üì§ –¢–µ—Å—Ç–æ–≤–µ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        logger.info("-" * 50)
        logger.info(text)
        logger.info("-" * 50)
        return True

async def test_memorial_messages():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    
    try:
        from memorial_messages import MemorialMessageScheduler
        
        fake_publisher = FakePublisher()
        scheduler = MemorialMessageScheduler(fake_publisher)
        
        # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        logger.info("üïØÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä—ñ–∑–Ω–∏—Ö –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:")
        
        for i in range(5):
            message = scheduler.get_random_memorial_message()
            logger.info(f"\nüìù –ü—Ä–∏–∫–ª–∞–¥ #{i+1}:")
            logger.info(f"   –î–æ–≤–∂–∏–Ω–∞: {len(message)} —Å–∏–º–≤–æ–ª—ñ–≤")
            logger.info(f"   –ü–æ—á–∞—Ç–æ–∫: {message[:80]}...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ
            emojis = ['üïØÔ∏è', 'üôè', 'üíî', 'üá∫üá¶', 'üíô', 'üíõ']
            found_emojis = [emoji for emoji in emojis if emoji in message]
            logger.info(f"   –ï–º–æ–¥–∑—ñ: {', '.join(found_emojis)}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É —á–∞—Å—É
        current_time = datetime.now().time()
        should_send = scheduler.should_send_memorial_message()
        
        logger.info(f"\n‚è∞ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time}")
        logger.info(f"üïØÔ∏è –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {should_send}")
        
        # –ü–æ—è—Å–Ω—é—î–º–æ –ª–æ–≥—ñ–∫—É
        if time(9, 0) <= current_time <= time(9, 30):
            logger.info("‚úÖ –ó–∞—Ä–∞–∑ —á–∞—Å –¥–ª—è –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (9:00-9:30)")
        else:
            logger.info("‚è∞ –ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø–æ—Ç—Ä—ñ–±–Ω–æ 9:00-9:30)")
        
        # –ü—Ä–∏–º—É—Å–æ–≤–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        logger.info("\nüì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        success = await scheduler.send_memorial_message()
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ memorial_messages: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    logger.info("=" * 60)
    
    try:
        success = await test_memorial_messages()
        
        if success:
            logger.info("=" * 60)
            logger.info("‚úÖ –¢–µ—Å—Ç –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            logger.info("\nüìã –©–æ –±—É–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ:")
            logger.info("   üïØÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤")
            logger.info("   ‚è∞ –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É (9:00-9:30)")
            logger.info("   üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            logger.info("   üòä –ù–∞—è–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –µ–º–æ–¥–∑—ñ")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    print("üá∫üá¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–º–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
    asyncio.run(main())