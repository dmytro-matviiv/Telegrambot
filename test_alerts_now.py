import asyncio
import aiohttp
import logging
from config import ALERTS_API_TOKEN
import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

async def test_alerts_api():
    """–¢–µ—Å—Ç—É—î API —Ç—Ä–∏–≤–æ–≥"""
    headers = {}
    params = {}
    token = ALERTS_API_TOKEN
    if not token:
        logger.error("ALERTS_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
        return
    
    headers['Authorization'] = f'Bearer {token}'
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, headers=headers, params=params, timeout=15) as resp:
                logger.info(f"–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {resp.status}")
                
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
                    if isinstance(data, dict) and 'alerts' in data:
                        alerts_list = data['alerts']
                    elif isinstance(data, list):
                        alerts_list = data
                    else:
                        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö: {type(data)}")
                        return
                    
                    logger.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∏–≤–æ–≥: {len(alerts_list)}")
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
                    air_raid_alerts = []
                    for alert in alerts_list:
                        if isinstance(alert, dict):
                            alert_type = alert.get('alert_type', '')
                            location_title = alert.get('location_title', '')
                            location_type = alert.get('location_type', '')
                            finished_at = alert.get('finished_at')
                            started_at = alert.get('started_at', '')
                            
                            if alert_type == 'air_raid' and location_type == 'oblast' and not finished_at:
                                air_raid_alerts.append({
                                    'location': location_title,
                                    'started_at': started_at
                                })
                    
                    if air_raid_alerts:
                        logger.info("üö® –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏:")
                        for alert in air_raid_alerts:
                            logger.info(f"   {alert['location']} (–ø–æ—á–∞–ª–∞—Å—è: {alert['started_at']})")
                    else:
                        logger.info("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î")
                        
                else:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ alerts.in.ua: {resp.status}")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Ç—Ä–∏–≤–æ–≥...")
    asyncio.run(test_alerts_api())
