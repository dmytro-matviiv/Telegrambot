#!/usr/bin/env python3
"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω –∑ –≤—ñ–¥–µ–æ
–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏–Ω–∏ —ñ –ø—É–±–ª—ñ–∫—É—î –ø–µ—Ä—à—É –∑ –≤—ñ–¥–µ–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—É –ª–æ–≥—ñ–∫—É
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timezone
from typing import List, Dict, Optional

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import BOT_TOKEN, CHANNEL_ID, NEWS_SOURCES
from news_collector import NewsCollector
from telegram_publisher import TelegramPublisher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class ImprovedVideoHandler:
    def __init__(self):
        self.news_collector = NewsCollector()
        self.telegram_publisher = TelegramPublisher()
        
    async def find_and_publish_video_news(self):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏–Ω–∏ —ñ –ø—É–±–ª—ñ–∫—É—î –ø–µ—Ä—à—É –∑ –≤—ñ–¥–µ–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é"""
        try:
            logger.info("üîç –ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫ –Ω–æ–≤–∏–Ω...")
            
            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            all_news = []
            sources_with_news = []
            
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
            for source_key, source_info in NEWS_SOURCES.items():
                try:
                    news = self.news_collector.get_news_from_rss(source_key, source_info)
                    if news:
                        sources_with_news.append((source_key, source_info, news))
                        all_news.extend(news)
                        logger.info(f"‚úÖ {source_info['name']}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–∏–Ω")
                except Exception as e:
                    logger.error(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ –Ω–æ–≤–∏–Ω –∑ {source_key}: {e}")
            
            logger.info(f"üì∞ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–∏–Ω –∑–∞–≥–∞–ª–æ–º")
            
            if not all_news:
                logger.warning("‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –®—É–∫–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ
            news_with_video = []
            for news in all_news:
                video_url = news.get('video_url', '')
                if video_url:
                    news_with_video.append(news)
                    logger.info(f"üé• –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ: {news.get('title', '')[:50]}...")
            
            if not news_with_video:
                logger.warning("‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ
            first_video_news = news_with_video[0]
            logger.info(f"üì§ –ü—É–±–ª—ñ–∫—É—é –ø–µ—Ä—à—É –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ: {first_video_news.get('title', '')[:50]}...")
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–∏–Ω—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
            success = await self.publish_news_with_video_preview(first_video_news)
            
            if success:
                logger.info("‚úÖ –ù–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                return True
            else:
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏ –∑ –≤—ñ–¥–µ–æ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É: {e}")
            return False

    async def publish_news_with_video_preview(self, news_item: Dict) -> bool:
        """–ü—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –≤—ñ–¥–µ–æ"""
        try:
            from telegram_publisher import TelegramPublisher
            
            text = self.telegram_publisher.format_news_text(news_item)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤—ñ–¥–µ–æ
            video_url = news_item.get('video_url', '')
            video_published = False
            
            if video_url:
                logger.info(f"üé¨ –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–µ–æ: {video_url[:50]}...")
                
                # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤—ñ–¥–µ–æ
                try:
                    video_data = await self.telegram_publisher.extract_and_download_video(video_url)
                    if video_data:
                        await self.telegram_publisher.bot.send_video(
                            chat_id=CHANNEL_ID,
                            video=video_data,
                            caption=text,
                            parse_mode='HTML',
                            supports_streaming=True
                        )
                        logger.info(f"üé• –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ: {news_item.get('title', '')[:50]}...")
                        video_published = True
                    else:
                        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ: {video_url}")
                        
                        # –î–ª—è iframe –≤—ñ–¥–µ–æ —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤—å—é
                        if 'iframe' in video_url.lower():
                            logger.info("üé¨ –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ –ø—Ä–µ–≤—å—é –¥–ª—è iframe...")
                            preview_video = await self.telegram_publisher.create_video_preview(video_url)
                            if preview_video:
                                try:
                                    await self.telegram_publisher.bot.send_video(
                                        chat_id=CHANNEL_ID,
                                        video=preview_video,
                                        caption=text,
                                        parse_mode='HTML',
                                        supports_streaming=True
                                    )
                                    logger.info(f"üé• –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ –ø—Ä–µ–≤—å—é: {news_item.get('title', '')[:50]}...")
                                    video_published = True
                                except Exception as e:
                                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ –ø—Ä–µ–≤—å—é: {e}")
                        
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª: {e}")
                    # –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç —è–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
                    try:
                        if 'video_data' in locals() and video_data:
                            await self.telegram_publisher.bot.send_document(
                                chat_id=CHANNEL_ID,
                                document=video_data,
                                caption=text,
                                parse_mode='HTML'
                            )
                            logger.info(f"üìé –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –≤—ñ–¥–µ–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {news_item.get('title', '')[:50]}...")
                            video_published = True
                    except Exception as e2:
                        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {e2}")
                
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ, –¥–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ —Ç–µ–∫—Å—Ç—É
                if not video_published:
                    # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ —ñ–∫–æ–Ω–∫–∞–º–∏
                    video_platforms = {
                        'youtube.com': ('üé¨', 'YouTube'), 'youtu.be': ('üé¨', 'YouTube'),
                        'vimeo.com': ('üé¨', 'Vimeo'), 'facebook.com': ('üì±', 'Facebook'),
                        'dailymotion.com': ('üé¨', 'Dailymotion'), 'rutube.ru': ('üé¨', 'Rutube'),
                        'vk.com': ('üì±', 'VK'), 'ok.ru': ('üì±', 'OK.ru'),
                        'tsn.ua': ('üì∫', '–¢–°–ù'), 'espreso.tv': ('üì∫', '–ï—Å–ø—Ä–µ—Å–æ'),
                        '24tv.ua': ('üì∫', '24 –ö–∞–Ω–∞–ª'), 'hromadske.ua': ('üì∫', '–ì—Ä–æ–º–∞–¥—Å—å–∫–µ'),
                        'suspilne.media': ('üì∫', '–°—É—Å–ø—ñ–ª—å–Ω–µ'), 'pravda.com.ua': ('üì∞', '–ü—Ä–∞–≤–¥–∞'),
                        'ukrinform.ua': ('üì∞', '–£–∫—Ä—ñ–Ω—Ñ–æ—Ä–º'), 'fakty.com.ua': ('üì∫', '–§–∞–∫—Ç–∏ ICTV'),
                        'obozrevatel.com': ('üì∞', '–û–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å'), 'censor.net': ('üì∞', '–¶–µ–Ω–∑–æ—Ä.–ù–ï–¢'),
                        'strana.ua': ('üì∞', '–°—Ç—Ä–∞–Ω–∞.ua'), 'lb.ua': ('üì∞', '–õ–µ–≤—ã–π –±–µ—Ä–µ–≥')
                    }
                    
                    platform_found = False
                    for platform, (icon, name) in video_platforms.items():
                        if platform in video_url.lower():
                            text += f"\n\n{icon} <a href=\"{video_url}\">–î–∏–≤–∏—Ç–∏—Å—è –Ω–∞ {name}</a>"
                            platform_found = True
                            break
                    
                    if not platform_found:
                        text += f"\n\nüé• <a href=\"{video_url}\">–î–∏–≤–∏—Ç–∏—Å—è –≤—ñ–¥–µ–æ</a>"
                    
                    logger.info(f"–î–æ–¥–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ: {video_url[:50]}...")
            
            # –Ø–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –æ–∫—Ä–µ–º–æ, –ø—É–±–ª—ñ–∫—É—î–º–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
            if not video_published:
                image_url = news_item.get('image_url', '')
                image_data = await self.telegram_publisher.download_image(image_url)

                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ
                if not image_data:
                    image_data = await self.telegram_publisher.download_image('default_ua_news.jpg')

                if image_data:
                    # –ü—É–±–ª—ñ–∫—É—î–º–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
                    await self.telegram_publisher.bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=image_data,
                        caption=text,
                        parse_mode='HTML'
                    )
                    logger.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º: {news_item.get('title', '')[:50]}...")
                else:
                    # –ü—É–±–ª—ñ–∫—É—î–º–æ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    await self.telegram_publisher.bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=text,
                        parse_mode='HTML',
                        disable_web_page_preview=False
                    )
                    logger.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–Ω—É –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {news_item.get('title', '')[:50]}...")
            
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
            return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –Ω–æ–≤–∏–Ω –∑ –≤—ñ–¥–µ–æ")
    
    handler = ImprovedVideoHandler()
    
    try:
        success = await handler.find_and_publish_video_news()
        
        if success:
            logger.info("‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É –±–µ–∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É: {e}")
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—ó
        try:
            if hasattr(handler.news_collector, 'session') and handler.news_collector.session:
                await handler.news_collector.session.close()
        except:
            pass
        try:
            if hasattr(handler.telegram_publisher, 'session') and handler.telegram_publisher.session:
                await handler.telegram_publisher.session.close()
        except:
            pass
        logger.info("üëã –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main()) 