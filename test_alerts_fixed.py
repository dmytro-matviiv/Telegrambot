import asyncio
import logging
from air_alerts_monitor import AirAlertsMonitor
from telegram_publisher import TelegramPublisher
import datetime
import sys
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è Windows
if sys.platform == "win32":
    os.system("chcp 65001 >nul")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('test_alerts_fixed.log', encoding='utf-8')
    ]
)

class MockTelegramPublisher:
    """–ú–æ–∫-–∫–ª–∞—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram"""
    
    def __init__(self):
        self.sent_messages = []
    
    async def send_simple_message(self, text: str) -> bool:
        self.sent_messages.append({
            'text': text,
            'timestamp': datetime.datetime.now()
        })
        print(f"[SEND] –¢–ï–°–¢: –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")
        return True

async def test_alerts_logic():
    """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç—Ä–∏–≤–æ–≥"""
    print("[TEST] –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ —Ç—Ä–∏–≤–æ–≥...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫-–ø—É–±–ª—ñ—à–µ—Ä
    mock_publisher = MockTelegramPublisher()
    monitor = AirAlertsMonitor(mock_publisher)
    
    # –°–∏–º—É–ª—é—î–º–æ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    print("\n[1] –¢–µ—Å—Ç—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏...")
    
    # –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ - –Ω–µ–º–∞—î —Ç—Ä–∏–≤–æ–≥
    monitor.prev_alerts = set()
    monitor.is_first_run = False
    
    # –°–∏–º—É–ª—é—î–º–æ –ø–æ—è–≤—É –Ω–æ–≤–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
    alerts_data_1 = [
        {
            'location_title': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
            'location_type': 'oblast',
            'alert_type': 'air_raid',
            'started_at': datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S"),
            'finished_at': None
        }
    ]
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ (—Å–∏–º—É–ª—é—î–º–æ —á–∞—Å—Ç–∏–Ω—É –ª–æ–≥—ñ–∫–∏ –∑ monitor())
    current_alerts_dict = {}
    all_alerts_dict = {}
    
    for alert in alerts_data_1:
        if monitor.is_valid_alert(alert):
            location_title = alert.get('location_title', '')
            alert_type = alert.get('alert_type', '')
            finished_at = alert.get('finished_at')
            
            key = (location_title, alert_type)
            all_alerts_dict[key] = alert
            
            if location_title and not finished_at:
                current_alerts_dict[key] = alert
    
    current_alerts = set(current_alerts_dict.keys())
    new_alerts = current_alerts - monitor.prev_alerts
    
    print(f"–ù–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏: {new_alerts}")
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏
    for key in new_alerts:
        alert = current_alerts_dict[key]
        text = f"üö® <b>–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞</b> ‚Äî {alert.get('location_title', '')}"
        await mock_publisher.send_simple_message(text)
    
    monitor.prev_alerts = current_alerts
    
    print("\n[2] –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥–∏...")
    
    # –°–∏–º—É–ª—é—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥–∏
    alerts_data_2 = [
        {
            'location_title': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
            'location_type': 'oblast',
            'alert_type': 'air_raid',
            'started_at': (datetime.datetime.utcnow() - datetime.timedelta(minutes=30)).strftime("%Y-%m-%dT%H:%M:%S"),
            'finished_at': datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S")
        }
    ]
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ
    current_alerts_dict_2 = {}
    all_alerts_dict_2 = {}
    
    for alert in alerts_data_2:
        if monitor.is_valid_alert(alert):
            location_title = alert.get('location_title', '')
            alert_type = alert.get('alert_type', '')
            finished_at = alert.get('finished_at')
            
            key = (location_title, alert_type)
            all_alerts_dict_2[key] = alert
            
            # –¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
            if location_title and not finished_at:
                current_alerts_dict_2[key] = alert
    
    current_alerts_2 = set(current_alerts_dict_2.keys())
    ended_alerts = monitor.prev_alerts - current_alerts_2
    
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏: {ended_alerts}")
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    for key in ended_alerts:
        location, alert_type = key
        if alert_type == 'air_raid':
            text = f"‚úÖ <b>–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏</b> ‚Äî {location}"
            await mock_publisher.send_simple_message(text)
    
    print("\n[3] –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"–í—Å—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(mock_publisher.sent_messages)}")
    for i, msg in enumerate(mock_publisher.sent_messages, 1):
        print(f"{i}. {msg['text']} (—á–∞—Å: {msg['timestamp'].strftime('%H:%M:%S')})")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    has_start = any('–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞' in msg['text'] for msg in mock_publisher.sent_messages)
    has_end = any('–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏' in msg['text'] for msg in mock_publisher.sent_messages)
    
    print(f"\n[OK] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏: {'–¢–∞–∫' if has_start else '–ù–Ü'}")
    print(f"[OK] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏: {'–¢–∞–∫' if has_end else '–ù–Ü'}")
    
    if has_start and has_end:
        print("\n[SUCCESS] –¢–ï–°–¢ –ü–†–û–ô–®–û–í –£–°–ü–Ü–®–ù–û! –û–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–∞—Ü—é—é—Ç—å.")
        return True
    else:
        print("\n[ERROR] –¢–ï–°–¢ –ù–ï –ü–†–û–ô–®–û–í! –©–æ—Å—å –Ω–µ –ø—Ä–∞—Ü—é—î.")
        return False

async def test_real_api():
    """–¢–µ—Å—Ç—É—î —Ä–µ–∞–ª—å–Ω–∏–π API"""
    print("\n[API] –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API...")
    
    mock_publisher = MockTelegramPublisher()
    monitor = AirAlertsMonitor(mock_publisher)
    
    try:
        alerts_data = await monitor.fetch_alerts()
        print(f"[OK] API –≤—ñ–¥–ø–æ–≤—ñ–≤, –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–∏—Ö: {len(alerts_data) if isinstance(alerts_data, list) else 'dict' if isinstance(alerts_data, dict) else '–Ω–µ–≤—ñ–¥–æ–º–æ'}")
        
        if isinstance(alerts_data, dict) and 'alerts' in alerts_data:
            alerts_list = alerts_data['alerts']
        elif isinstance(alerts_data, list):
            alerts_list = alerts_data
        else:
            print("[ERROR] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –≤—ñ–¥ API")
            return False
            
        valid_alerts = [alert for alert in alerts_list if monitor.is_valid_alert(alert)]
        print(f"[INFO] –í–∞–ª—ñ–¥–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥: {len(valid_alerts)}")
        
        for alert in valid_alerts[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            location = alert.get('location_title', '–ù–µ–≤—ñ–¥–æ–º–æ')
            finished = alert.get('finished_at')
            status = "–ê–∫—Ç–∏–≤–Ω–∞" if not finished else "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
            print(f"  - {location}: {status}")
            
        return True
        
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ API: {e}")
        return False

async def main():
    print("[START] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ —Ç—Ä–∏–≤–æ–≥\n")
    
    # –¢–µ—Å—Ç –ª–æ–≥—ñ–∫–∏
    logic_test = await test_alerts_logic()
    
    # –¢–µ—Å—Ç API
    api_test = await test_real_api()
    
    print(f"\n[SUMMARY] –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"–õ–æ–≥—ñ–∫–∞ —Ç—Ä–∏–≤–æ–≥: {'[OK] –ü—Ä–∞—Ü—é—î' if logic_test else '[ERROR] –ù–µ –ø—Ä–∞—Ü—é—î'}")
    print(f"API –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {'[OK] –ü—Ä–∞—Ü—é—î' if api_test else '[ERROR] –ù–µ –ø—Ä–∞—Ü—é—î'}")
    
    if logic_test and api_test:
        print("\n[SUCCESS] –í–°–ï –ü–†–ê–¶–Æ–Ñ! –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±–æ—Ç–∞.")
    else:
        print("\n[WARNING] –Ñ –ø—Ä–æ–±–ª–µ–º–∏, –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

if __name__ == "__main__":
    asyncio.run(main())